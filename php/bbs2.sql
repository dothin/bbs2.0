/*
Navicat MySQL Data Transfer

Source Server         : localhost_3306
Source Server Version : 50617
Source Host           : localhost:3306
Source Database       : bbs2

Target Server Type    : MYSQL
Target Server Version : 50617
File Encoding         : 65001

Date: 2016-05-16 20:42:18
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `bbs_friend`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_friend`;
CREATE TABLE `bbs_friend` (
  `friend_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `from_user_id` int(10) unsigned DEFAULT NULL,
  `to_user_id` int(10) unsigned DEFAULT NULL,
  `friend_desc` varchar(256) NOT NULL,
  `friend_status` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `friend_time` datetime NOT NULL,
  `agree_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`friend_id`),
  KEY `FK_Reference_1` (`from_user_id`),
  KEY `FK_Reference_2` (`to_user_id`),
  CONSTRAINT `FK_Reference_1` FOREIGN KEY (`from_user_id`) REFERENCES `bbs_user` (`user_id`),
  CONSTRAINT `FK_Reference_2` FOREIGN KEY (`to_user_id`) REFERENCES `bbs_user` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_friend
-- ----------------------------
INSERT INTO `bbs_friend` VALUES ('7', '36', '12', '跟我交朋友吧', '0', '2016-05-12 14:23:56', '0000-00-00 00:00:00');
INSERT INTO `bbs_friend` VALUES ('10', '36', '1', '跟我交朋友吧', '1', '2016-05-12 15:34:38', '2016-05-12 20:07:00');
INSERT INTO `bbs_friend` VALUES ('19', '10', '1', '跟我交朋友吧', '1', '2016-05-12 22:26:50', '2016-05-15 12:04:12');
INSERT INTO `bbs_friend` VALUES ('20', '1', '12', '跟我交朋友吧', '1', '2016-05-12 23:38:36', '2016-05-12 23:38:51');
INSERT INTO `bbs_friend` VALUES ('23', '9', '1', '跟我交朋友吧', '0', '2016-05-15 00:18:11', '0000-00-00 00:00:00');
INSERT INTO `bbs_friend` VALUES ('26', '1', '37', '跟我交朋友吧', '1', '2016-05-15 12:54:37', '2016-05-15 12:54:43');

-- ----------------------------
-- Table structure for `bbs_integral_log`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_integral_log`;
CREATE TABLE `bbs_integral_log` (
  `log_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned DEFAULT NULL,
  `rule_action` varchar(32) NOT NULL,
  `get_integral` tinyint(2) unsigned NOT NULL,
  `time` datetime NOT NULL,
  PRIMARY KEY (`log_id`),
  KEY `FK_Reference_26` (`user_id`),
  CONSTRAINT `FK_Reference_26` FOREIGN KEY (`user_id`) REFERENCES `bbs_user` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=90 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_integral_log
-- ----------------------------
INSERT INTO `bbs_integral_log` VALUES ('20', '1', '登录', '2', '2016-05-13 22:22:35');
INSERT INTO `bbs_integral_log` VALUES ('21', '1', '发帖', '5', '2016-05-13 22:53:21');
INSERT INTO `bbs_integral_log` VALUES ('22', '1', '发帖', '5', '2016-05-13 22:53:41');
INSERT INTO `bbs_integral_log` VALUES ('23', '1', '回帖', '4', '2016-05-13 22:54:38');
INSERT INTO `bbs_integral_log` VALUES ('24', '1', '回帖', '2', '2016-05-13 22:55:19');
INSERT INTO `bbs_integral_log` VALUES ('25', '1', '楼中回帖', '5', '2016-05-13 22:55:49');
INSERT INTO `bbs_integral_log` VALUES ('26', '1', '楼中回帖', '2', '2016-05-13 22:56:02');
INSERT INTO `bbs_integral_log` VALUES ('29', '1', '收藏', '2', '2016-05-13 22:59:17');
INSERT INTO `bbs_integral_log` VALUES ('32', '1', '私信', '2', '2016-05-13 23:00:49');
INSERT INTO `bbs_integral_log` VALUES ('33', '1', '留言', '2', '2016-05-13 23:01:24');
INSERT INTO `bbs_integral_log` VALUES ('34', '1', '回帖', '2', '2016-05-13 23:29:56');
INSERT INTO `bbs_integral_log` VALUES ('35', '36', '登录', '2', '2016-05-13 23:48:37');
INSERT INTO `bbs_integral_log` VALUES ('36', '36', '收藏', '2', '2016-05-13 23:49:16');
INSERT INTO `bbs_integral_log` VALUES ('37', '36', '收藏', '2', '2016-05-13 23:58:17');
INSERT INTO `bbs_integral_log` VALUES ('38', '1', '楼中回帖', '2', '2016-05-14 00:02:17');
INSERT INTO `bbs_integral_log` VALUES ('39', '1', '登录', '2', '2016-05-14 00:06:25');
INSERT INTO `bbs_integral_log` VALUES ('40', '36', '登录', '2', '2016-05-14 00:20:27');
INSERT INTO `bbs_integral_log` VALUES ('41', '39', '登录', '2', '2016-05-14 00:25:51');
INSERT INTO `bbs_integral_log` VALUES ('42', '1', '私信', '2', '2016-05-14 00:57:18');
INSERT INTO `bbs_integral_log` VALUES ('43', '34', '登录', '2', '2016-05-14 09:36:39');
INSERT INTO `bbs_integral_log` VALUES ('44', '12', '登录', '2', '2016-05-14 09:37:09');
INSERT INTO `bbs_integral_log` VALUES ('45', '35', '登录', '2', '2016-05-14 09:37:20');
INSERT INTO `bbs_integral_log` VALUES ('46', '10', '登录', '2', '2016-05-14 09:37:43');
INSERT INTO `bbs_integral_log` VALUES ('47', '1', '发帖', '5', '2016-05-14 12:05:41');
INSERT INTO `bbs_integral_log` VALUES ('48', '40', '登录', '2', '2016-05-14 16:52:03');
INSERT INTO `bbs_integral_log` VALUES ('49', '41', '登录', '2', '2016-05-14 17:34:03');
INSERT INTO `bbs_integral_log` VALUES ('50', '42', '登录', '2', '2016-05-14 18:27:18');
INSERT INTO `bbs_integral_log` VALUES ('51', '12', '回帖', '2', '2016-05-14 22:16:49');
INSERT INTO `bbs_integral_log` VALUES ('52', '12', '楼中回帖', '2', '2016-05-14 22:17:15');
INSERT INTO `bbs_integral_log` VALUES ('53', '12', '发帖', '5', '2016-05-14 22:18:24');
INSERT INTO `bbs_integral_log` VALUES ('54', '1', '发帖', '5', '2016-05-14 23:25:24');
INSERT INTO `bbs_integral_log` VALUES ('55', '1', '发帖', '5', '2016-05-14 23:26:55');
INSERT INTO `bbs_integral_log` VALUES ('56', '1', '发帖', '5', '2016-05-14 23:27:58');
INSERT INTO `bbs_integral_log` VALUES ('57', '1', '发帖', '5', '2016-05-14 23:41:00');
INSERT INTO `bbs_integral_log` VALUES ('58', '1', '回帖', '2', '2016-05-14 23:41:34');
INSERT INTO `bbs_integral_log` VALUES ('59', '1', '楼中回帖', '2', '2016-05-14 23:41:41');
INSERT INTO `bbs_integral_log` VALUES ('60', '1', '私信', '2', '2016-05-14 23:45:44');
INSERT INTO `bbs_integral_log` VALUES ('61', '1', '登录', '2', '2016-05-15 00:04:56');
INSERT INTO `bbs_integral_log` VALUES ('62', '9', '登录', '2', '2016-05-15 00:06:16');
INSERT INTO `bbs_integral_log` VALUES ('63', '9', '留言', '2', '2016-05-15 00:14:02');
INSERT INTO `bbs_integral_log` VALUES ('64', '12', '登录', '2', '2016-05-15 11:10:48');
INSERT INTO `bbs_integral_log` VALUES ('65', '12', '私信', '2', '2016-05-15 11:10:55');
INSERT INTO `bbs_integral_log` VALUES ('66', '12', '私信', '2', '2016-05-15 12:06:15');
INSERT INTO `bbs_integral_log` VALUES ('67', '37', '登录', '2', '2016-05-15 12:34:31');
INSERT INTO `bbs_integral_log` VALUES ('68', '37', '留言', '2', '2016-05-15 12:35:09');
INSERT INTO `bbs_integral_log` VALUES ('69', '37', '留言', '2', '2016-05-15 12:39:42');
INSERT INTO `bbs_integral_log` VALUES ('70', '1', '留言', '2', '2016-05-15 12:55:01');
INSERT INTO `bbs_integral_log` VALUES ('71', '1', '私信', '2', '2016-05-15 12:55:17');
INSERT INTO `bbs_integral_log` VALUES ('72', '1', '私信', '2', '2016-05-15 12:55:51');
INSERT INTO `bbs_integral_log` VALUES ('73', '37', '私信', '2', '2016-05-15 12:56:22');
INSERT INTO `bbs_integral_log` VALUES ('74', '37', '私信', '2', '2016-05-15 12:56:52');
INSERT INTO `bbs_integral_log` VALUES ('75', '37', '私信', '2', '2016-05-15 12:57:57');
INSERT INTO `bbs_integral_log` VALUES ('76', '37', '私信', '2', '2016-05-15 12:58:22');
INSERT INTO `bbs_integral_log` VALUES ('77', '37', '私信', '2', '2016-05-15 13:01:19');
INSERT INTO `bbs_integral_log` VALUES ('78', '37', '私信', '2', '2016-05-15 13:02:16');
INSERT INTO `bbs_integral_log` VALUES ('79', '1', '私信', '2', '2016-05-15 13:07:49');
INSERT INTO `bbs_integral_log` VALUES ('80', '1', '私信', '2', '2016-05-15 13:09:17');
INSERT INTO `bbs_integral_log` VALUES ('81', '1', '私信', '2', '2016-05-15 13:10:15');
INSERT INTO `bbs_integral_log` VALUES ('82', '1', '私信', '2', '2016-05-15 13:10:28');
INSERT INTO `bbs_integral_log` VALUES ('83', '37', '私信', '2', '2016-05-15 13:12:38');
INSERT INTO `bbs_integral_log` VALUES ('84', '1', '回帖', '2', '2016-05-15 17:33:49');
INSERT INTO `bbs_integral_log` VALUES ('85', '1', '收藏', '2', '2016-05-15 17:51:24');
INSERT INTO `bbs_integral_log` VALUES ('86', '1', '收藏', '2', '2016-05-15 18:54:40');
INSERT INTO `bbs_integral_log` VALUES ('87', '1', '私信', '2', '2016-05-15 18:55:55');
INSERT INTO `bbs_integral_log` VALUES ('88', '1', '登录', '2', '2016-05-16 19:34:51');
INSERT INTO `bbs_integral_log` VALUES ('89', '1', '发帖', '5', '2016-05-16 20:21:14');

-- ----------------------------
-- Table structure for `bbs_integral_rule`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_integral_rule`;
CREATE TABLE `bbs_integral_rule` (
  `rule_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `rule_action` varchar(32) NOT NULL COMMENT '积分动作',
  `get_integral` tinyint(2) unsigned NOT NULL,
  `rule_status` tinyint(1) NOT NULL DEFAULT '1',
  `modify_manage_id` int(10) unsigned DEFAULT NULL COMMENT '管理员id',
  `modify_time` datetime NOT NULL,
  `rule_time` datetime NOT NULL,
  PRIMARY KEY (`rule_id`),
  KEY `FK_Reference_27` (`modify_manage_id`),
  CONSTRAINT `FK_Reference_27` FOREIGN KEY (`modify_manage_id`) REFERENCES `bbs_manage` (`manage_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_integral_rule
-- ----------------------------
INSERT INTO `bbs_integral_rule` VALUES ('1', '登录', '2', '1', '1', '2016-05-14 22:17:08', '2016-05-13 20:31:30');
INSERT INTO `bbs_integral_rule` VALUES ('2', '发帖', '5', '1', '1', '2016-05-14 22:17:08', '2016-05-13 20:31:49');
INSERT INTO `bbs_integral_rule` VALUES ('3', '回帖', '2', '1', '1', '2016-05-14 22:17:08', '2016-05-13 20:32:13');
INSERT INTO `bbs_integral_rule` VALUES ('4', '楼中回帖', '2', '1', '1', '2016-05-14 22:17:08', '2016-05-13 20:32:18');
INSERT INTO `bbs_integral_rule` VALUES ('5', '收藏', '2', '1', '1', '2016-05-14 22:17:08', '2016-05-13 20:32:37');
INSERT INTO `bbs_integral_rule` VALUES ('6', '私信', '2', '1', '1', '2016-05-14 22:17:08', '2016-05-13 20:32:43');
INSERT INTO `bbs_integral_rule` VALUES ('7', '留言', '2', '1', '1', '2016-05-14 22:17:08', '2016-05-13 20:32:50');

-- ----------------------------
-- Table structure for `bbs_login_fail`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_login_fail`;
CREATE TABLE `bbs_login_fail` (
  `fail_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `fail_name` varchar(32) NOT NULL,
  `fail_count` int(10) unsigned NOT NULL DEFAULT '0',
  `fail_reason` varchar(32) NOT NULL,
  `fail_time` datetime NOT NULL,
  PRIMARY KEY (`fail_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_login_fail
-- ----------------------------
INSERT INTO `bbs_login_fail` VALUES ('1', 'wwww', '7', '用户名或者密码错误', '2016-05-14 17:28:58');
INSERT INTO `bbs_login_fail` VALUES ('2', 'wwwww', '5', '用户名或者密码错误', '2016-05-14 17:29:36');
INSERT INTO `bbs_login_fail` VALUES ('3', 'yyyy', '4', '用户名或者密码错误', '2016-05-14 22:16:00');
INSERT INTO `bbs_login_fail` VALUES ('4', '娜美', '2', '用户名或者密码错误', '2016-05-15 12:34:24');

-- ----------------------------
-- Table structure for `bbs_manage`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_manage`;
CREATE TABLE `bbs_manage` (
  `manage_id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '管理员id',
  `manage_name` varchar(32) NOT NULL COMMENT '管理员姓名',
  `manage_pass` char(40) NOT NULL COMMENT '管理员密码',
  `manage_level` tinyint(1) unsigned NOT NULL COMMENT '管理员等级',
  `manage_sex` tinyint(1) unsigned NOT NULL,
  `reg_time` datetime NOT NULL,
  `last_login_time` datetime DEFAULT NULL,
  `last_login_ip` varchar(32) DEFAULT NULL,
  `last_login_place` varchar(64) DEFAULT NULL,
  PRIMARY KEY (`manage_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_manage
-- ----------------------------
INSERT INTO `bbs_manage` VALUES ('1', 'admin', '7c4a8d09ca3762af61e59520943dc26494f8941b', '1', '0', '2016-05-06 20:18:48', '2016-05-16 19:38:01', '::1', null);
INSERT INTO `bbs_manage` VALUES ('2', 'post', '7c4a8d09ca3762af61e59520943dc26494f8941b', '2', '0', '2016-05-07 20:07:49', '2016-05-15 13:49:44', '::1', null);
INSERT INTO `bbs_manage` VALUES ('4', 'user', '7c4a8d09ca3762af61e59520943dc26494f8941b', '4', '0', '2016-05-07 21:37:49', null, null, null);
INSERT INTO `bbs_manage` VALUES ('5', 'integral', 'da39a3ee5e6b4b0d3255bfef95601890afd80709', '5', '0', '2016-05-07 22:01:09', null, null, null);
INSERT INTO `bbs_manage` VALUES ('6', 'system', '7c4a8d09ca3762af61e59520943dc26494f8941b', '6', '0', '2016-05-07 22:01:39', null, null, null);
INSERT INTO `bbs_manage` VALUES ('7', 'module', '7c4a8d09ca3762af61e59520943dc26494f8941b', '3', '0', '2016-05-07 22:02:44', null, null, null);

-- ----------------------------
-- Table structure for `bbs_manage_level`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_manage_level`;
CREATE TABLE `bbs_manage_level` (
  `m_level_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `m_level_name` varchar(16) NOT NULL,
  `m_level_desc` varchar(64) NOT NULL,
  `premission` varchar(128) NOT NULL,
  `m_level_time` datetime NOT NULL,
  PRIMARY KEY (`m_level_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_manage_level
-- ----------------------------
INSERT INTO `bbs_manage_level` VALUES ('1', '超级管理员', '管理所有', '1,2,3,4,5,6', '2016-05-10 22:15:28');
INSERT INTO `bbs_manage_level` VALUES ('2', '审贴员', '审核帖子', '4', '2016-05-10 22:15:32');
INSERT INTO `bbs_manage_level` VALUES ('3', '板块管理员', '管理所有板块', '3', '2016-05-10 22:15:35');
INSERT INTO `bbs_manage_level` VALUES ('4', '普通用户管理员', '只能管理用户信息', '2', '2016-05-15 13:51:40');
INSERT INTO `bbs_manage_level` VALUES ('5', '积分管理员', '只能管理积分', '5', '2016-05-15 13:52:43');
INSERT INTO `bbs_manage_level` VALUES ('6', '系统管理员', '只能管理系统', '6', '2016-05-15 13:53:14');

-- ----------------------------
-- Table structure for `bbs_message`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_message`;
CREATE TABLE `bbs_message` (
  `message_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `from_user_id` int(10) unsigned DEFAULT NULL,
  `to_user_id` int(10) unsigned DEFAULT NULL,
  `message_content` varchar(256) NOT NULL,
  `message_status` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `message_time` datetime NOT NULL,
  PRIMARY KEY (`message_id`),
  KEY `FK_Reference_3` (`from_user_id`),
  KEY `FK_Reference_4` (`to_user_id`),
  CONSTRAINT `FK_Reference_3` FOREIGN KEY (`from_user_id`) REFERENCES `bbs_user` (`user_id`),
  CONSTRAINT `FK_Reference_4` FOREIGN KEY (`to_user_id`) REFERENCES `bbs_user` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_message
-- ----------------------------
INSERT INTO `bbs_message` VALUES ('1', '10', '1', '我是叶凡', '1', '2016-05-12 22:41:57');
INSERT INTO `bbs_message` VALUES ('2', '36', '1', '我是云曦', '1', '2016-05-12 22:48:12');
INSERT INTO `bbs_message` VALUES ('3', '12', '1', '我是路飞', '1', '2016-05-12 22:48:27');
INSERT INTO `bbs_message` VALUES ('4', '1', '36', '我是dothin', '0', '2016-05-12 22:48:49');
INSERT INTO `bbs_message` VALUES ('5', '12', '34', '我是路飞', '0', '2016-05-12 22:49:02');
INSERT INTO `bbs_message` VALUES ('6', '12', '1', '我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞我是路飞', '1', '2016-05-12 23:27:46');
INSERT INTO `bbs_message` VALUES ('8', '1', '36', '我是dothin', '0', '2016-05-12 23:37:53');
INSERT INTO `bbs_message` VALUES ('9', '1', '12', 'gggggggggggg', '0', '2016-05-13 19:53:15');
INSERT INTO `bbs_message` VALUES ('10', '1', '35', 'vvvvvvvvvvvvvvvvvvvvv', '0', '2016-05-13 23:01:24');
INSERT INTO `bbs_message` VALUES ('11', '37', '1', '单独的', '1', '2016-05-15 12:35:09');
INSERT INTO `bbs_message` VALUES ('13', '1', '37', '的的', '1', '2016-05-15 12:55:01');

-- ----------------------------
-- Table structure for `bbs_module`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_module`;
CREATE TABLE `bbs_module` (
  `module_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `manage_id` int(11) DEFAULT NULL COMMENT '管理员id',
  `module_name` varchar(16) NOT NULL,
  `module_desc` varchar(64) NOT NULL,
  `module_url` varchar(64) NOT NULL,
  `module_time` datetime NOT NULL,
  PRIMARY KEY (`module_id`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_module
-- ----------------------------
INSERT INTO `bbs_module` VALUES ('1', '1', 'html', 'html学习', '/bbs2.0/php/source/module_thumb/20160514115002212.jpg', '2016-05-06 20:19:33');
INSERT INTO `bbs_module` VALUES ('2', '1', 'css', 'css学习', '/bbs2.0/php/source/module_thumb/20160514115002212.jpg', '2016-05-06 20:20:16');
INSERT INTO `bbs_module` VALUES ('3', '1', 'java', '发生范德萨', '/bbs2.0/php/source/module_thumb/20160514115002212.jpg', '2016-05-08 16:07:44');
INSERT INTO `bbs_module` VALUES ('4', '1', 'js', 'fdsaf', '/bbs2.0/php/source/module_thumb/20160514115002212.jpg', '2016-05-08 16:14:15');
INSERT INTO `bbs_module` VALUES ('7', '2', 'html5', 'html5相关', '/bbs2.0/php/source/module_thumb/20160514113912191.png', '2016-05-08 19:27:00');
INSERT INTO `bbs_module` VALUES ('8', '2', 'angularJs', 'angularJs相关', '/bbs2.0/php/source/module_thumb/20160514113858701.png', '2016-05-08 19:27:14');
INSERT INTO `bbs_module` VALUES ('9', '2', 'nodeJs', 'nodeJs相关', '/bbs2.0/php/source/module_thumb/20160514231654155.jpg', '2016-05-08 19:27:29');
INSERT INTO `bbs_module` VALUES ('10', '2', 'mysql', 'mysql相关', '/bbs2.0/php/source/module_thumb/20160514113747510.png', '2016-05-08 19:27:48');
INSERT INTO `bbs_module` VALUES ('11', '2', 'jquery', 'jquery相关', '/bbs2.0/php/source/module_thumb/20160514115002212.jpg', '2016-05-08 19:28:21');
INSERT INTO `bbs_module` VALUES ('12', '2', 'gulp', 'gulp相关', '/bbs2.0/php/source/module_thumb/20160514115002212.jpg', '2016-05-08 19:28:31');
INSERT INTO `bbs_module` VALUES ('13', '2', 'grunt', 'grunt相关', '/bbs2.0/php/source/module_thumb/20160514113718792.png', '2016-05-08 19:28:40');
INSERT INTO `bbs_module` VALUES ('14', '2', 'react', 'react相关', '/bbs2.0/php/source/module_thumb/20160514113654912.png', '2016-05-08 20:13:12');
INSERT INTO `bbs_module` VALUES ('15', '1', '前端', '前端技术', '/bbs2.0/php/source/module_thumb/20160514115002212.jpg', '2016-05-10 14:33:44');
INSERT INTO `bbs_module` VALUES ('16', '1', 'Android', 'Android相关知识', '/bbs2.0/php/source/module_thumb/20160514115002212.jpg', '2016-05-10 15:21:54');
INSERT INTO `bbs_module` VALUES ('22', '1', '其他', '其他信息', '/bbs2.0/php/source/module_thumb/20160514233534598.jpg', '2016-05-14 23:35:37');

-- ----------------------------
-- Table structure for `bbs_post`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_post`;
CREATE TABLE `bbs_post` (
  `post_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `module_id` int(10) unsigned DEFAULT NULL,
  `user_id` int(10) unsigned DEFAULT NULL,
  `post_type` tinyint(1) unsigned NOT NULL,
  `post_title` varchar(32) NOT NULL,
  `post_content` text NOT NULL,
  `post_readcount` int(10) unsigned NOT NULL DEFAULT '0',
  `post_commentcount` int(10) unsigned NOT NULL DEFAULT '0',
  `post_support` int(10) unsigned NOT NULL DEFAULT '0',
  `post_against` int(10) unsigned NOT NULL DEFAULT '0',
  `post_re` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `post_jin` tinyint(1) unsigned NOT NULL,
  `post_modify_time` datetime NOT NULL,
  `post_status` tinyint(1) unsigned NOT NULL DEFAULT '1',
  `post_time` datetime NOT NULL,
  PRIMARY KEY (`post_id`)
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_post
-- ----------------------------
INSERT INTO `bbs_post` VALUES ('5', '14', '1', '0', '放大放大', '<h1>范德萨分的<span style=\"font-family:comic sans ms,cursive\">fdafd&nbsp;<span style=\"font-size:28px\">fdsaf&nbsp;<span style=\"color:#FF8C00\">fdsafd&nbsp;</span></span></span></h1>\n', '99', '3', '4', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-09 13:32:39');
INSERT INTO `bbs_post` VALUES ('6', '9', '1', '0', '前后端分离的思考与实践', '<h2>也谈基于NodeJS的全栈式开发（基于NodeJS的前后端分离）</h2>\n\n<hr />\n<h3>前言</h3>\n\n<p>为了解决传统Web开发模式带来的各种问题，我们进行了许多尝试，但由于前/后端的物理鸿沟，尝试的方案都大同小异。痛定思痛，今天我们重新思考了&ldquo;前后端&rdquo;的定义，引入前端同学都熟悉的NodeJS，试图探索一条全新的前后端分离模式。</p>\n\n<p>随着不同终端(Pad/Mobile/PC)的兴起，对开发人员的要求越来越高，纯浏览器端的响应式已经不能满足用户体验的高要求，我们往往需要针对不同的终端开发定制的版本。为了提升开发效率，前后端分离的需求越来越被重视，后端负责业务/数据接口，前端负责展现/交互逻辑，同一份数据接口，我们可以定制开发多个版本。</p>\n\n<p>这个话题最近被讨论得比较多，阿里有些BU也在进行一些尝试。讨论了很久之后，我们团队决定探索一套基于NodeJS的前后端分离方案，过程中有一些不断变化的认识以及思考，记录在这里，也希望看到的同学参与讨论，帮我们完善。</p>\n\n<h2>一、什么是前后端分离？</h2>\n\n<p>最开始组内讨论的过程中我发现，每个人对前后端分离的理解不一样，为了保证能在同一个频道讨论，先就什么是&rdquo;前后端分离&rdquo;达成一致。</p>\n\n<p>大家一致认同的前后端分离的例子就是SPA(Single-page application)，所有用到的展现数据都是后端通过异步接口(AJAX/JSONP)的方式提供的，前端只管展现。<br />\n从某种意义上来说，SPA确实做到了前后端分离，但这种方式存在两个问题：</p>\n\n<ul>\n	<li>WEB服务中，SPA类占的比例很少。很多场景下还有同步/同步+异步混合的模式，SPA不能作为一种通用的解决方案。</li>\n	<li>现阶段的SPA开发模式，接口通常是按照展现逻辑来提供的，有时候为了提高效率，后端会帮我们处理一些展现逻辑，这就意味着后端还是涉足了View层的工作，不是真正的前后端分离。</li>\n</ul>\n\n<p>SPA式的前后端分离，是从物理层做区分（认为只要是客户端的就是前端，服务器端的就是后端），这种分法已经无法满足我们前后端分离的需求，我们认为从职责上划分才能满足目前我们的使用场景：</p>\n\n<ul>\n	<li>前端：负责View和Controller层。</li>\n	<li>后端：只负责Model层，业务处理/数据等。</li>\n</ul>\n\n<p>为什么去做这种职责的划分，后面会继续探讨。</p>\n\n<h2>二、为什么要前后端分离？</h2>\n\n<p>关于这个问题，玉伯的文章<a href=\"https://github.com/lifesinger/lifesinger.github.com/issues/184\">Web研发模式演变</a>中解释得非常全面，我们再大概理一下：</p>\n\n<h4>2.1 现有开发模式的适用场景</h4>\n\n<p>玉伯提到的几种开发模式，各有各的适用场景，没有哪一种完全取代另外一种。</p>\n\n<ul>\n	<li>比如后端为主的MVC，做一些同步展现的业务效率很高，但是遇到同步异步结合的页面，与后端开发沟通起来就会比较麻烦。</li>\n	<li>Ajax为主SPA型开发模式，比较适合开发APP类型的场景，但是只适合做APP，因为SEO等问题不好解决，对于很多类型的系统，这种开发方式也过重。</li>\n</ul>\n\n<h4>2.2 前后端职责不清</h4>\n\n<p>在业务逻辑复杂的系统里，我们最怕维护前后端混杂在一起的代码，因为没有约束，M-V-C每一层都可能出现别的层的代码，日积月累，完全没有维护性可言。<br />\n虽然前后端分离没办法完全解决这种问题，但是可以大大缓解。因为从物理层次上保证了你不可能这么做。</p>\n\n<h4>2.3 开发效率问题</h4>\n\n<p>淘宝的Web基本上都是基于MVC框架webx，架构决定了前端只能依赖后端。<br />\n所以我们的开发模式依然是，前端写好静态demo，后端翻译成VM模版，这种模式的问题就不说了，被吐槽了很久。<br />\n直接基于后端环境开发也很痛苦，配置安装使用都很麻烦。为了解决这个问题，我们发明了各种工具，比如<a href=\"https://www.npmjs.org/package/vmarket\" target=\"_blank\">VMarket</a>，但是前端还是要写VM，而且依赖后端数据，效率依然不高。<br />\n另外，后端也没法摆脱对展现的强关注，从而专心于业务逻辑层的开发。</p>\n\n<h4>2.4 对前端发挥的局限</h4>\n\n<p>性能优化如果只在前端做空间非常有限，于是我们经常需要后端合作才能碰撞出火花，但由于后端框架限制，我们很难使用Comet、Bigpipe等技术方案来优化性能。</p>\n\n<p>为了解决以上提到的一些问题，我们进行了很多尝试，开发了各种工具，但始终没有太多起色，主要是因为我们只能在后端给我们划分的那一小块空间去发挥。只有真正做到前后端分离，我们才能彻底解决以上问题。</p>\n\n<h2>三、怎么做前后端分离？</h2>\n\n<p>怎么做前后端分离，其实第一节中已经有了答案：</p>\n\n<ul>\n	<li>前端：负责View和Controller层。</li>\n	<li>后端：负责Model层，业务处理/数据等。</li>\n</ul>\n\n<p><img alt=\"MVC分\" src=\"http://gtms01.alicdn.com/tps/i1/T1qg9oFu4iXXXk_Dc5-555-263.png\" title=\"\" /></p>\n\n<p>试想一下，如果前端掌握了Controller，我们可以做url design，我们可以根据场景决定在服务端同步渲染，还是根据view层数据输出json数据，我们还可以根据表现层需求很容易的做Bigpipe,Comet,Socket等等，完全是需求决定使用方式。</p>\n\n<h4>3.1 基于NodeJS&ldquo;全栈&rdquo;式开发</h4>\n\n<p>如果想实现上图的分层，就必然需要一种web服务帮我们实现以前后端做的事情，于是就有了标题提到的&ldquo;基于NodeJS的全栈式开发&rdquo;</p>\n\n<p><img alt=\"Node 带来的全栈时代\" src=\"http://gtms03.alicdn.com/tps/i3/T1xW8OFrXkXXXK71TW-590-611.png\" title=\"\" /></p>\n\n<p>这张图看起来简单而且很好理解，但没尝试过，会有很多疑问。</p>\n\n<ul>\n	<li>SPA模式中，后端已供了所需的数据接口，view前端已经可以控制，为什么要多加NodeJS这一层？</li>\n	<li>多加一层，性能怎么样？</li>\n	<li>多加一层，前端的工作量是不是增加了？</li>\n	<li>多加一层就多一层风险，怎么破？</li>\n	<li>NodeJS什么都能做，为什么还要JAVA？</li>\n</ul>\n\n<p>这些问题要说清楚不容易，下面说下我的认识过程。</p>\n\n<h4>3.2 为什么要增加一层NodeJS？</h4>\n\n<p>现阶段我们主要以后端MVC的模式进行开发，这种模式严重阻碍了前端开发效率，也让后端不能专注于业务开发。<br />\n解决方案是让前端能控制Controller层，但是如果在现有技术体系下很难做到，因为不可能让所有前端都学java，安装后端的开发环境，写VM。<br />\nNodeJS就能很好的解决这个问题，我们无需学习一门新的语言，就能做到以前开发帮我们做的事情，一切都显得那么自然。</p>\n\n<h4>3.3 性能问题</h4>\n\n<p>分层就涉及每层之间的通讯，肯定会有一定的性能损耗。但是合理的分层能让职责清晰、也方便协作，会大大提高开发效率。分层带来的损失，一定能在其他方面的收益弥补回来。<br />\n另外，一旦决定分层，我们可以通过优化通讯方式、通讯协议，尽可能把损耗降到最低。</p>\n\n<p><strong>举个例子：</strong><br />\n淘宝宝贝详情页静态化之后，还是有不少需要实时获取的信息，比如物流、促销等等，因为这些信息在不同业务系统中，所以需要前端发送5，6个异步请求来回填这些内容。<br />\n有了NodeJS之后，前端可以在NodeJS中去代理这5个异步请求，还能很容易的做Bigpipe,这块的优化能让整个渲染效率提升很多。<br />\n可能在PC上你觉得发5,6个异步请求也没什么，但是在无线端，在客户手机上建立一个HTTP请求开销很大，有了这个优化，性能一下提升好几倍。</p>\n\n<p>淘宝详情基于NodeJS的优化我们正在进行中，上线之后我会分享一下优化的过程。</p>\n\n<h4>3.4 前端的工作量是否增加了？</h4>\n\n<p>相对于只切页面/做demo，肯定是增加了一点，但是当前模式下有联调、沟通环节，这个过程非常花时间，也容易出bug，还很难维护。<br />\n所以，虽然工作量会增加一点，但是总体开发效率会提升很多。</p>\n\n<p>另外，测试成本可以节省很多。以前开发的接口都是针对表现层的，很难写测试用例。如果做了前后端分离，甚至测试都可以分开，一拨人专门测试接口，一拨人专注测试UI（这部分工作甚至可以用工具代替）。</p>\n\n<h4>3.5 增加Node层带来的风险怎么控制？</h4>\n\n<p>随着Node大规模使用，系统/运维/安全部门的同学也一定会加入到基础建设中，他们会帮助我们去完善各个环节可能出现的问题，保障系的稳定性。</p>\n\n<h4>3.6 Node什么都能做，为什么还要JAVA？</h4>\n\n<p>我们的初衷是做前后端分离，如果考虑这个问题就有点违背我们的初衷了。即使用Node替代Java，我们也没办法保证不出现今天遇到的种种问题，比如职责不清。我们的目的是分层开发，专业的人，专注做专业的事。基于JAVA的基础架构已经非常强大而且稳定，而且更适合做现在架构的事情。</p>\n\n<h2>四、淘宝基于Node的前后端分离</h2>\n\n<p><img alt=\"淘宝基于NodeJS的前后端分离\" src=\"http://gtms03.alicdn.com/tps/i3/T1OMsAFApcXXaI5uU7-800-521.jpg\" title=\"\" /></p>\n\n<p>上图是我理解的淘宝基于Node的前后端分离分层，以及Node的职责范围。简单解释下：</p>\n\n<ul>\n	<li>最上端是服务端，就是我们常说的后端。后端对于我们来说，就是一个接口的集合，服务端提供各种各样的接口供我们使用。因为有Node层，也不用局限是什么形式的服务。对于后端开发来说，他们只用关心业务代码的接口实现。</li>\n	<li>服务端下面是Node应用。</li>\n	<li>Node应用中有一层Model Proxy与服务端进行通讯。这一层主要目前是抹平我们对不同接口的调用方式，封装一些view层需要的Model。</li>\n	<li>Node层还能轻松实现原来vmcommon,tms（引用淘宝内容管理系统）等需求。</li>\n	<li>Node层要使用什么框架由开发者自己决定。不过推荐使用express+xTemplate的组合，xTemplate能做到前后端公用。</li>\n	<li>怎么用Node大家自己决定，但是令人兴奋的是，我们终于可以使用Node轻松实现我们想要的输出方式:JSON/JSONP/RESTful/HTML/BigPipe/Comet/Socket/同步、异步，想怎么整就怎么整，完全根据你的场景决定。</li>\n	<li>浏览器层在我们这个架构中没有变化，也不希望因为引入Node改变你以前在浏览器中开发的认知。</li>\n	<li>引入Node，只是把本该就前端控制的部分交由前端掌控。</li>\n</ul>\n\n<p>这种模式我们已经有两个项目在开发中，虽然还没上线，但是无论是在开发效率，还是在性能优化方面，我们都已经尝到了甜头。</p>\n\n<h2>五、我们还需要要做什么？</h2>\n\n<ul>\n	<li>把Node的开发流程集成到淘宝现有的SCM流程中。</li>\n	<li>基础设施建设，比如session,logger等通用模块。</li>\n	<li>最佳开发实践</li>\n	<li>线上成功案例</li>\n	<li>大家对Node前后端分离概念的认识</li>\n	<li>安全</li>\n	<li>性能</li>\n	<li>&hellip;</li>\n</ul>\n\n<p>技术上不会有太多需要去创新和研究的，已经有非常多现成的积累。其实关键是一些流程的打通和通用解决方案的积累，相信随着更多的项目实践，这块慢慢会变成一个稳定的流程。</p>\n\n<h2>六、&ldquo;中途岛&rdquo;</h2>\n\n<p>虽然&ldquo;基于NodeJS的全栈式开发&rdquo;模式很让人兴奋，但是把基于Node的全栈开发变成一个稳定，让大家都能接受的东西还有很多路要走，我们正在进行的&ldquo;中途岛&rdquo;项目就是为了解决这个问题。虽然我们起步不久，但是离目标已经越来越近！！</p>\n', '166', '13', '11', '3', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-09 18:06:37');
INSERT INTO `bbs_post` VALUES ('7', '11', '1', '0', '谈谈 jQuery 中的防冲突（noConflict）机制', '<p>许多的 JS 框架类库都选择使用 $ 符号作为函数或变量名，jQuery 是其中最为典型的一个。在 jQuery 中，$ 符号只是 window.jQuery 对象的一个引用，因此即使 $ 被删除，window.jQuery 依然是保证整个类库完整性的坚强后盾。jQuery 的 API 设计充分考虑了多框架之间的引用冲突，我们可以使用 jQuery.noConflict 方法来轻松实现控制权的移交。</p>\n\n<p>jQuery.noConflict 方法包含一个可选的布尔参数<sup>[1]</sup>，用以决定移交 $ 引用的同时是否移交 jQuery 对象本身：</p>\n\n<pre>\njQuery.noConflict([removeAll])</pre>\n\n<p>缺省情况下，执行 noConflict 会将变量 $ 的控制权移交给第一个产生 $ 的库；当 removeAll 设置为 true 时，执行 noConflict 则会将 $ 和 jQuery 对象本身的控制权全部移交给第一个产生他们的库。</p>\n\n<p>例如在 KISSY 和 jQuery 混用，并且惯用 $ = KISSY 来简化 API 操作的时候，就能够通过这个方法解决命名冲突的问题。</p>\n\n<p>那么这个机制是如何实现的呢？阅读 jQuery 源码开头<sup>[2]</sup>，首先做的一件事情是这样的：</p>\n\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Map over jQuery in case of overwrite<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _jQuery = window.jQuery,</div>\n\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Map over the $ in case of overwrite<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _$ = window.$,</div>\n\n<p>容易理解的是，jQuery 通过两个私有变量映射了 window 环境下的 jQuery 和 $ 两个对象，以防止变量被强行覆盖。一旦 noConflict 方法被调用，则通过 _jQuery, _$, jQuery, $ 四者之间的差异，来决定控制权的移交方式，具体的代码如下：</p>\n\n<pre>\nnoConflict: function( deep ) {\n                if ( window.$ === jQuery ) {\n                        window.$ = _$;\n                }\n\n                if ( deep &amp;&amp; window.jQuery === jQuery ) {\n                        window.jQuery = _jQuery;\n                }\n\n                return jQuery;\n        }</pre>\n\n<p>再来看上面所说的参数设定问题，如果 deep 没有设置，_$ 覆盖 window.$，此时 jQuery 别名 $ 失效，但 jQuery 本身完好无损。如果有其他类库或代码重新定义了 $ 变量，它的控制权就完全交接出去了。反之如果 deep 设置为 true 的话，_jQuery 覆盖 window.jQuery，此时 $ 和 jQuery 都将失效。</p>\n\n<p>这种操作的好处是，不管是框架混用还是 jQuery 多版本共存这种高度冲突的执行环境，由于 noConflict 方法提供的移交机制，以及本身返回未被覆盖的 jQuery 对象，完全能够通过变量映射的方式解决冲突。</p>\n\n<p>但无法避免的事实是可能导致的插件失效等问题，当然通过简单修改上下文参数即可恢复 $ 别名：</p>\n\n<pre>\nvar query = jQuery.noConflict(true);\n(function ($) {\n\n     // 插件或其他形式的代码，也可以将参数设为 jQuery\n\n})(query);</pre>\n', '3', '0', '0', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-10 14:28:03');
INSERT INTO `bbs_post` VALUES ('8', '4', '1', '0', '关于Promise内存泄漏的问题', '<p><a href=\"http://cdn.alloyteam.com/wp-content/uploads/2015/05/QQ%E6%88%AA%E5%9B%BE20150530201328.png\" rel=\"prettyPhoto[1]\"><img alt=\"Promise\" src=\"https://camo.githubusercontent.com/936320d9d13426d9631ff49d817b5d542e135d10/687474703a2f2f7777772e616c6c6f797465616d2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031352f30352f515125453625383825414125453525394225424532303135303533303230313332382e706e67\" title=\"\" /></a></p>\n\n<h1><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"nofollow\">Promise</a></h1>\n\n<p>Promise是ES6的新特性，在ES6之前各大浏览器、各种polyfill和各种js执行环境都针对Promise进行了自己的实现，不过实现上大同小异。</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<h1>V8 Promise内存泄漏</h1>\n\n<p>不过V8对Promise的实现存在内存泄漏问题，当一个promise无法resolve也无法reject的时候，就会发生内存泄漏。</p>\n\n<p>一个很容易造成Promise内存泄漏的场景便是递归Promise或者嵌套Promise。</p>\n\n<p>为方便观察内存使用情况，下面是一段在Nodejs里面运行的代码</p>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n\n			<p>2</p>\n\n			<p>3</p>\n\n			<p>4</p>\n\n			<p>5</p>\n\n			<p>6</p>\n\n			<p>7</p>\n\n			<p>8</p>\n\n			<p>9</p>\n\n			<p>10</p>\n\n			<p>11</p>\n\n			<p>12</p>\n\n			<p>13</p>\n\n			<p>14</p>\n\n			<p>15</p>\n\n			<p>16</p>\n\n			<p>17</p>\n\n			<p>18</p>\n\n			<p>19</p>\n			</td>\n			<td>\n			<p>(function() {</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;// 记录Promise链的长度</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;var i = 0;</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;function run() {</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Promise(function(resolve) {</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 每增加10000个Promise打印一次内存使用情况</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i % 10000 === 0) console.log(i);</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 模拟一个异步操作</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 100000个Promise之后退出</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(i === 10000 * 10) return resolve();</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 如果resolve的参数是一个Promise，外层Promise将接管这个Promise的状态，构成嵌套Promise</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(run());</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, 0);</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}).then(function() {});</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;run();</p>\n\n			<p>})();</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>在我的电脑上输出：</p>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n\n			<p>2</p>\n\n			<p>3</p>\n\n			<p>4</p>\n\n			<p>5</p>\n\n			<p>6</p>\n\n			<p>7</p>\n\n			<p>8</p>\n\n			<p>9</p>\n\n			<p>10</p>\n			</td>\n			<td>\n			<p>{ rss: 18649088, heapTotal: 12359168, heapUsed: 5261784 }</p>\n\n			<p>{ rss: 47480832, heapTotal: 54668544, heapUsed: 23838080 }</p>\n\n			<p>{ rss: 78712832, heapTotal: 69115648, heapUsed: 38977672 }</p>\n\n			<p>{ rss: 96018432, heapTotal: 84594688, heapUsed: 56701128 }</p>\n\n			<p>{ rss: 112631808, heapTotal: 101105664, heapUsed: 72469704 }</p>\n\n			<p>{ rss: 129875968, heapTotal: 118648576, heapUsed: 88569232 }</p>\n\n			<p>{ rss: 147075072, heapTotal: 135159552, heapUsed: 104614336 }</p>\n\n			<p>{ rss: 164286464, heapTotal: 151670528, heapUsed: 120667096 }</p>\n\n			<p>{ rss: 181628928, heapTotal: 169213440, heapUsed: 136718144 }</p>\n\n			<p>{ rss: 193110016, heapTotal: 180564736, heapUsed: 157979448 }</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>关键代码就是这一行</p>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n\n			<p>2</p>\n			</td>\n			<td>\n			<p>// 如果resolve的参数是一个Promise，外层Promise将接管这个Promise的状态，构成嵌套Promise</p>\n\n			<p>resolve(run());</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>嵌套的Prosise形成了一个Promise状态链，外层Promise等待内层Promise调用resolve或者reject，因为V8原生的Promise实现存在缺陷，这样使用之后会积累一大坨Promise，无法被释放，所以就造成了内存泄漏。</p>\n\n<p>有趣的是，将代码稍作修改，将第5行的return去掉，却不会出现内存泄漏的问题</p>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n\n			<p>2</p>\n\n			<p>3</p>\n\n			<p>4</p>\n\n			<p>5</p>\n\n			<p>6</p>\n\n			<p>7</p>\n\n			<p>8</p>\n\n			<p>9</p>\n\n			<p>10</p>\n\n			<p>11</p>\n\n			<p>12</p>\n\n			<p>13</p>\n\n			<p>14</p>\n\n			<p>15</p>\n\n			<p>16</p>\n\n			<p>17</p>\n\n			<p>18</p>\n\n			<p>19</p>\n\n			<p>20</p>\n			</td>\n			<td>\n			<p>(function() {</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;// 记录Promise链的长度</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;var i = 0;</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;function run() {</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 去掉return</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new Promise(function(resolve) {</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 每增加10000个Promise打印一次内存使用情况</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i % 10000 === 0) console.log(process.memoryUsage());</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 模拟一个异步操作</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setImmediate(function() {</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 100000个Promise之后退出</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(i === 10000 * 10) return resolve();</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 如果resolve的参数是一个Promise，外层Promise将接管这个Promise的状态，构成嵌套Promise</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(run());</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}).then(function() {});</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;run();</p>\n\n			<p>})();</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>输出：</p>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n\n			<p>2</p>\n\n			<p>3</p>\n\n			<p>4</p>\n\n			<p>5</p>\n\n			<p>6</p>\n\n			<p>7</p>\n\n			<p>8</p>\n\n			<p>9</p>\n\n			<p>10</p>\n			</td>\n			<td>\n			<p>{ rss: 18636800, heapTotal: 12359168, heapUsed: 5261760 }</p>\n\n			<p>{ rss: 26435584, heapTotal: 18550784, heapUsed: 8178720 }</p>\n\n			<p>{ rss: 26472448, heapTotal: 18550784, heapUsed: 6725168 }</p>\n\n			<p>{ rss: 26472448, heapTotal: 18550784, heapUsed: 9352496 }</p>\n\n			<p>{ rss: 26472448, heapTotal: 18550784, heapUsed: 7852088 }</p>\n\n			<p>{ rss: 26472448, heapTotal: 18550784, heapUsed: 6351640 }</p>\n\n			<p>{ rss: 26472448, heapTotal: 18550784, heapUsed: 8977488 }</p>\n\n			<p>{ rss: 26472448, heapTotal: 18550784, heapUsed: 7477072 }</p>\n\n			<p>{ rss: 26472448, heapTotal: 18550784, heapUsed: 5976560 }</p>\n\n			<p>{ rss: 26476544, heapTotal: 18550784, heapUsed: 8602336 }</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>究其原因是没构成嵌套Promise，run返回了undefined，不是一个Promise。</p>\n\n<p>为了证明V8的实现确实存在问题，我们来看看<a href=\"https://github.com/petkaantonov/bluebird\" rel=\"nofollow\">bluebird</a>的实现，bluebird是众多Promise polyfill中的一个。</p>\n\n<p>使用bluebird来解决这个问题非常简单，只用将Promise替换成bluebird的实现，同时为每个Promise调用done，关于为什么Prosime需要done，请看<a href=\"http://bahmutov.calepin.co/why-promises-need-to-be-done.html\" rel=\"nofollow\">这里</a></p>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n\n			<p>2</p>\n\n			<p>3</p>\n\n			<p>4</p>\n\n			<p>5</p>\n\n			<p>6</p>\n\n			<p>7</p>\n\n			<p>8</p>\n\n			<p>9</p>\n\n			<p>10</p>\n\n			<p>11</p>\n\n			<p>12</p>\n\n			<p>13</p>\n\n			<p>14</p>\n\n			<p>15</p>\n\n			<p>16</p>\n\n			<p>17</p>\n\n			<p>18</p>\n\n			<p>19</p>\n\n			<p>20</p>\n			</td>\n			<td>\n			<p>var Promise = require(&#39;bluebird&#39;);</p>\n\n			<p>(function() {</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;// 记录Promise链的长度</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;var i = 0;</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;function run() {</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Promise(function(resolve) {</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 每增加10000个Promise打印一次内存使用情况</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i % 10000 === 0) console.log(process.memoryUsage());</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 模拟一个异步操作</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setImmediate(function() {</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 100000个Promise之后退出</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(i === 10000 * 10) return resolve();</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 如果resolve的参数是一个Promise，外层Promise将接管这个Promise的状态，构成嵌套Promise</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(run());</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}).then(function() {}).done();</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;}</p>\n\n			<p>&nbsp;&nbsp;&nbsp;&nbsp;run();</p>\n\n			<p>})();</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n\n			<p>2</p>\n\n			<p>3</p>\n\n			<p>4</p>\n\n			<p>5</p>\n\n			<p>6</p>\n\n			<p>7</p>\n\n			<p>8</p>\n\n			<p>9</p>\n\n			<p>10</p>\n			</td>\n			<td>\n			<p>{ rss: 22421504, heapTotal: 14423040, heapUsed: 6167664 }</p>\n\n			<p>{ rss: 27738112, heapTotal: 18550784, heapUsed: 8497792 }</p>\n\n			<p>{ rss: 27770880, heapTotal: 18550784, heapUsed: 7449536 }</p>\n\n			<p>{ rss: 27774976, heapTotal: 18550784, heapUsed: 10486392 }</p>\n\n			<p>{ rss: 27774976, heapTotal: 18550784, heapUsed: 9395416 }</p>\n\n			<p>{ rss: 27774976, heapTotal: 18550784, heapUsed: 8304040 }</p>\n\n			<p>{ rss: 27779072, heapTotal: 18550784, heapUsed: 7212688 }</p>\n\n			<p>{ rss: 27779072, heapTotal: 18550784, heapUsed: 10247776 }</p>\n\n			<p>{ rss: 27787264, heapTotal: 18550784, heapUsed: 9177776 }</p>\n\n			<p>{ rss: 27803648, heapTotal: 18550784, heapUsed: 8088968 }</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>done的作用是告诉引擎没有任何地方需要等Promise resolve或者reject了，可以gc掉了，因为状态已转移到内层Promise去了，只用保留最内层Promise即可。</p>\n\n<p>到目前为止V8引擎还没实现原生的Promise.done。</p>\n\n<p>&nbsp;</p>\n\n<h1>总结一下</h1>\n\n<ul>\n	<li>随着ES6/ES7的快速发展，Promise显得日益重要，今后将会有大量基于Promise的API出现</li>\n	<li>嵌套Promise应该属于反模式了吧，尽量避免写出这种代码</li>\n	<li>确保每一个Promise都会调用done，引擎不存在这种缺陷的情况除外</li>\n	<li>相信Promise会越来越好用，各个js引擎也会对Promise进行优化</li>\n	<li>&nbsp;</li>\n</ul>\n\n<p>以上纯属基于简单技术模型的研究，实际中遇到Promise内存泄漏往往很不好排查问题，如发现文章中有不足之处还望在留言中指出。</p>\n\n<p>原创文章转载请注明：</p>\n\n<p>转载自AlloyTeam：<a href=\"http://www.alloyteam.com/2015/05/memory-leak-caused-by-promise/\">http://www.alloyteam.com/2015/05/memory-leak-caused-by-promise/</a></p>\n', '2', '0', '0', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-10 14:31:44');
INSERT INTO `bbs_post` VALUES ('9', '15', '1', '0', '一箩筐的预加载技术', '<h2>译者说明</h2>\n\n<ul>\n	<li>本文翻译自<a href=\"https://css-tricks.com/prefetching-preloading-prebrowsing/\" rel=\"nofollow\">Prefetching, preloading, prebrowsing</a>，为了阅读通畅，部分技术术语就不做蹩脚的翻译了。</li>\n	<li>原文中有很多扩展文章的链接，都是对所在章节的详细说明，个个都值得一读。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p>当我们谈到前端的性能时，总是会提到比如合并、压缩、缓存或者在服务器上开启gzip之类的，目的都是为了让页面加载的更快。</p>\n\n<p>资源预拉取（prefetch）则是另一种性能优化的技术。通过预拉取可以告诉浏览器用户在未来可能用到哪些资源。</p>\n\n<p><a href=\"https://twitter.com/patrickhamann\" rel=\"nofollow\">Patrick Hamann</a>&nbsp;对此的<a href=\"http://patrickhamann.com/workshops/performance/tasks/2_Critical_Path/2_3.html\" rel=\"nofollow\">说明</a>：</p>\n\n<blockquote>\n<p>Pre-fetching会提示浏览器那些未来一定或可能使用到的资源，有时在当前页面见效，有些则在未来可能打开的页面生效。 作为开发者，我们比浏览器更懂自己的应用。我们可以利用这些技术提前告知浏览器web中用到的核心资源。</p>\n</blockquote>\n\n<p>以前这种实践也被称为『prebrowsing』。但这并不是一种单一的技术，实际上可以拆分成很多小点：dns-prefetch, subresource, prefetch, preconnect, 和 prerender.</p>\n\n<h2>DNS prefetch</h2>\n\n<p>DNS prefetching通过指定具体的URL来告知客户端未来会用到相关的资源，这样浏览器可以尽早的解析DNS。比如我们需要一个在example.com的图片或者视频文件。在&lt;head&gt;就可以这么写：</p>\n\n<p>&nbsp;</p>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n			</td>\n			<td>\n			<p>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//example.com&quot;&gt;</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<p>当请求这个域名下的文件时就不需要等待DNS查询了。项目中有用到第三方的代码时这么做尤其有益（译者注：其他的使用场景，比如当静态资源和HTML不在一个域上，而在CDN上；又比如在重定向前可以加上DNS prefetch）。</p>\n\n<p>Harry Roberts在他的<a href=\"http://csswizardry.com/2013/01/front-end-performance-for-web-designers-and-front-end-developers/#section:dns-prefetching\" rel=\"nofollow\">前端性能优化文章</a>中建议：</p>\n\n<blockquote>\n<p>简单的一行就能让支持的浏览器提前解析DNS。也就是说在浏览器请求资源时，DNS查询就已经准备好了。</p>\n</blockquote>\n\n<p>这可能看起来是个非常微不足道的性能提升，而且还不是必须的&ndash;<a href=\"https://docs.google.com/presentation/d/18zlAdKAxnc51y_kj-6sWLmnjl6TLnaru_WH0LJTjP-o/present?slide=id.g120f70e9a_041\" rel=\"nofollow\">Chrome总是会做类似的处理</a>，用户只要在地址栏敲入一部分域名，如果命中了历史常用的网站，Chrome就会提前解析DNS、预拉取页面。（译者注：效果确实有限，但是聊胜于无）</p>\n\n<blockquote>\n<p><a href=\"http://caniuse.com/#feat=link-rel-dns-prefetch\" rel=\"nofollow\">caniuse</a></p>\n</blockquote>\n\n<h2>Preconnect</h2>\n\n<p>和DNS prefetch类似，preconnect不光会解析DNS，还会建立TCP握手连接和TLS协议（如果需要）。用法如下：</p>\n\n<p>&nbsp;</p>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n			</td>\n			<td>\n			<p>&lt;link rel=&quot;preconnect&quot; href=&quot;http://css-tricks.com&quot;&gt;</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<p>Ilya Grigorik写了一篇<a href=\"https://www.igvita.com/2015/08/17/eliminating-roundtrips-with-preconnect/\" rel=\"nofollow\">文章</a>详细说明了这种技术：</p>\n\n<blockquote>\n<p>现代浏览器竭尽所能的尝试预测网站可能需要哪些链接。通过提前连接，浏览器可以提前建立必要的通信，消除了实际请求中DNS、TCP和TLS的耗时。不过，即使是只能的现代浏览器，也没办法为每个网站可靠的预测所有连接。</p>\n\n<p>幸运的是开发者可以告诉浏览器哪些通信需要在实际请求发起前就提前建立连接。</p>\n</blockquote>\n\n<p>举个栗子：&nbsp;<a href=\"https://1-ps.googleusercontent.com/sk/bYSmB63yuhjL_l7bPRuu4R3ENi/www.igvita.com/posts/15/xfont-preconnect.png.pagespeed.ic.tC0wdnTl8DuD8UE7Xn1Y.png\" rel=\"prettyPhoto[1]\"><img alt=\"\" src=\"https://1-ps.googleusercontent.com/sk/bYSmB63yuhjL_l7bPRuu4R3ENi/www.igvita.com/posts/15/xfont-preconnect.png.pagespeed.ic.tC0wdnTl8DuD8UE7Xn1Y.png\" title=\"\" /></a>上半张图显示了浏览器先拉html、再拉CSS并建立好CSSOM后，发现需要两个外链的字体（在fonts.gstatic.com上）,然后浏览器开始发起两个请求，具体来说，需要对这个域进行DNS解析、TCP和TLS握手（一个建立后可以复用给另一个连接）。</p>\n\n<p>&nbsp;</p>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n\n			<p>2</p>\n			</td>\n			<td>\n			<p>&lt;link href=&#39;https://fonts.gstatic.com&#39; rel=&#39;preconnect&#39; crossorigin&gt;</p>\n\n			<p>&lt;link href=&#39;https://fonts.googleapis.com/css?family=Roboto+Slab:700|Open+Sans&#39; rel=&#39;stylesheet&#39;&gt;</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<p>下半张图增加了上面的代码来从fonts.gstatic.com&nbsp;<strong>preconnect</strong>资源。可以看到，浏览器在请求CSS的同时并行的建立字体资源需要的连接，等到真正开始需要字体时立刻就开始返回数据。</p>\n\n<p>更多详细的内容可以参考Ilya Grigorik的文章。</p>\n\n<blockquote>\n<p>目前只支持Firefox 39+和Chrome 46+，具体参见<a href=\"http://caniuse.com/#feat=link-rel-preconnect\" rel=\"nofollow\">caniuse</a></p>\n</blockquote>\n\n<h2>Prefetch</h2>\n\n<p>当能确定网页在未来一定会使用到某个资源时，开发者可以让浏览器提前请求并且缓存好以供后续使用。<strong>prefetch</strong>支持预拉取图片、脚本或者任何可以被浏览器缓存的资源。</p>\n\n<p>&nbsp;</p>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n			</td>\n			<td>\n			<p>&lt;link rel=&quot;prefetch&quot; href=&quot;image.png&quot;&gt;</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<p>不同于DNS prefetch，上面的写法可是会去请求、下载资源并且缓存起来。当然也是有一些发生条件的。比如，客户端可能会在弱网络下不去请求较大的字体文件，Firefox则只会在浏览器空闲的时候prefetch资源（译者注：<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ\" rel=\"nofollow\">这里</a>是MDN上对浏览器空闲的定义和一些FAQ，建议阅读）。</p>\n\n<p>正如Bram Stein在他的<a href=\"http://www.bramstein.com/writing/preload-hints-for-web-fonts.html\" rel=\"nofollow\">文章</a>中指出，prefetch很适用于优化webfonts的性能。以前，字体文件必须等DOM和CSSOM创建好后才能下载，可如果prefetch了字体，这个瓶颈就能轻松解决了。</p>\n\n<blockquote>\n<p>注意：prefetch并没有同域的限制</p>\n</blockquote>\n\n<p><a href=\"http://caniuse.com/#feat=link-rel-prefetch\" rel=\"nofollow\">caniuse</a></p>\n\n<h2>Subresource</h2>\n\n<p>subresource可以用来指定资源是最高优先级的。比如，在Chrome和Opera中我们可以加上下面的代码：</p>\n\n<p>&nbsp;</p>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n			</td>\n			<td>\n			<p>&lt;link rel=&quot;subresource&quot; href=&quot;styles.css&quot;&gt;</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<p><a href=\"https://www.chromium.org/spdy/link-headers-and-server-hint/link-rel-subresource\" rel=\"nofollow\">Chromium的文档</a>这么解释：</p>\n\n<blockquote>\n<p>和 &quot;Link rel=prefetch&quot;的语义不同，&quot;Link rel=subresource&quot;是一种新的连接关系。rel=prefetch指定了下载后续页面用到资源的低优先级，而rel=subresource则是指定当前页面资源的提前加载。</p>\n</blockquote>\n\n<p>所以，如果资源是在当前页面需要，或者马上就会用到，则推荐用subresource，否则还是用prefetch。</p>\n\n<h2>Prerender</h2>\n\n<p>prerender是一个重量级的选项，它可以让浏览器提前加载指定页面的所有资源。</p>\n\n<p>&nbsp;</p>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n			</td>\n			<td>\n			<p>&lt;link rel=&quot;prerender&quot;&nbsp;&nbsp;href=&quot;/thenextpage.html&quot; /&gt;</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<p>Steve Souders的<a href=\"http://www.stevesouders.com/blog/2013/11/07/prebrowsing/\" rel=\"nofollow\">文章</a>详细解释了这个技术：</p>\n\n<blockquote>\n<p>prerender就像是在后台打开了一个隐藏的tab，会下载所有的资源、创建DOM、渲染页面、执行JS等等。如果用户进入指定的链接，隐藏的这个页面就会进入马上进入用户的视线。Google Search多年前就利用了这个特性实现了Instant Pages功能。微软最近也宣布会让Bing在IE11上用类似prerender的技术。</p>\n</blockquote>\n\n<p>但是要注意，一定要在十分确定用户回点某个链接时才用这个特性，否则客户端就会无端的下载很多资源和渲染这个页面。</p>\n\n<blockquote>\n<p>正如任何提前的动作一样，预判总是有一定风险出错。如果提前的动作是昂贵的（比如高CPU、耗电、占用带宽），就要谨慎使用了。虽然不容易预判用户会点进哪个页面，但还是存在一些典型的场景：</p>\n\n<ul>\n	<li>如果用户搜索到了一个明显正确的结果时，那么这个页面就很有可能被点入</li>\n	<li>如果用户在登录页面，那么登录成功后的页面就很可能接下来会被加载了</li>\n	<li>如果用户在阅读一个多页面的文章或者有页码的内容时，下一页就很可能会马上被点击了</li>\n</ul>\n</blockquote>\n\n<p>利用<a href=\"http://www.w3.org/TR/page-visibility/\" rel=\"nofollow\">Page Visibility API</a>可以用来防止页面在还没真正展示给用户时就触发了JS的执行。</p>\n\n<p><a href=\"http://caniuse.com/#feat=link-rel-prerender\" rel=\"nofollow\">caniuse</a></p>\n\n<h2>未来：Preload</h2>\n\n<p>以上是已有的技术，我们再谈谈未来。 preload<a href=\"https://w3c.github.io/preload/\" rel=\"nofollow\">草案</a>建议允许始终预加载某些资源，不像prefetch有可能被浏览器忽略，浏览器必须请求preload标记的资源。</p>\n\n<p>&nbsp;</p>\n\n<table>\n	<tbody>\n		<tr>\n			<td>\n			<p>1</p>\n			</td>\n			<td>\n			<p>&lt;link rel=&quot;preload&quot; href=&quot;image.png&quot;&gt;</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n\n<p>&nbsp;</p>\n\n<p>然而，这项草案还没有任何浏览器支持，不过值得关注。</p>\n\n<p>&nbsp;</p>\n\n<h2>总结</h2>\n\n<p>预判用户的操作虽然不易，而且还需要大量的设计和测试工作，但是性能的提升是值得我们孜孜不倦的去追求的。如果我们愿意试验这些预加载技术，我们肯定能显著地提升用户体验。</p>\n\n<p>（译者补一句，文章说的大部分预加载技术移动端都不支持，PC支持有限，但我们显然应该知道这些技术的存在，并且持续的关注）</p>\n\n<p>&nbsp;</p>\n\n<h2>扩展阅读</h2>\n\n<ul>\n	<li><a href=\"https://docs.google.com/presentation/d/18zlAdKAxnc51y_kj-6sWLmnjl6TLnaru_WH0LJTjP-o/present?slide=id.p19\" rel=\"nofollow\">Slides from a talk by Ilya Grigorik called Preconnect, prerender, prefetch</a></li>\n	<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ\" rel=\"nofollow\">MDN link prefetching FAQ</a></li>\n	<li><a href=\"https://w3c.github.io/preload/\" rel=\"nofollow\">W3C preload spec</a></li>\n	<li><a href=\"http://csswizardry.com/2013/01/front-end-performance-for-web-designers-and-front-end-developers/#section:dns-prefetching\" rel=\"nofollow\">Harry Roberts on DNS prefetching</a></li>\n	<li><a href=\"https://medium.com/@luisvieira_gmr/html5-prefetch-1e54f6dda15d#.yl37ya9a1\" rel=\"nofollow\">HTML5 prefetch</a></li>\n	<li><a href=\"http://www.bramstein.com/writing/preload-hints-for-web-fonts.html\" rel=\"nofollow\">Preload hints for webfonts</a></li>\n</ul>\n\n<p>原创文章转载请注明：</p>\n\n<p>转载自AlloyTeam：<a href=\"http://www.alloyteam.com/2015/10/prefetching-preloading-prebrowsing/\">http://www.alloyteam.com/2015/10/prefetching-preloading-prebrowsing/</a></p>\n', '10', '1', '1', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-10 14:34:07');
INSERT INTO `bbs_post` VALUES ('10', '8', '1', '0', 'zone.js - 暴力之美', '<p>在ng2的开发过程中，Angular团队为我们带来了一个新的库 &ndash; zone.js。zone.js的设计灵感来源于Dart语言，它描述JavaScript执行过程的上下文，可以在异步任务之间进行持久性传递，它类似于Java中的TLS（<a href=\"http://en.wikipedia.org/wiki/Thread-local_storage\">thread-local storage: 线程本地存储</a>）技术，zone.js则是将TLS引入到JavaScript语言中的实现框架。</p>\n\n<p>那么zone.js能为我们解决什么问题呢？在回答这个问题之前，博主更希望回顾下在JavaScript开发中，我们究竟遇见了什么难题？</p>\n\n<h4>问题引入</h4>\n\n<p>我们先来看一段常规的同步JavaScript代码：</p>\n\n<pre>\n<code>var foo = function(){ ... },\n    bar = function(){ ... },\n    baz = function(){ ... };\n\nfoo();\nbar();\nbaz();\n</code></pre>\n\n<p>这段代码并没有什么特殊之处，它的执行顺序也并无什么特殊之处，完全在我们的预知之内：foo &ndash;&gt; bar &ndash;&gt; baz。对它做性能监测也很容易，我们只需要在执行上下文前后记录执行时间即可。</p>\n\n<pre>\n<code>var start, \n    timer = performance ? performance.now.bind(performance) : Date.now.bind(Date);\n\nstart = timer();\n\nfoo(); \nbar(); \nbaz(); \n\nconsole.log(Math.floor((timer() - start) * 100) / 100 + &#39;ms&#39;);\n</code></pre>\n\n<p>但在JavaScript的世界并不全是这么简单，众所周知的JavaScript单线程执行的。因此为了不阻塞UI界面的用户体验，在JavaScript执行的很多耗时操作都被封装为了异步操作，如：setTimeout、XMLHttpRequest、DOM事件等。由于浏览器的寄宿限制，JavaScript中异步操作是与生俱来的特性，被深深的印在了骨髓之中。这也是Ryan Dahl博士选择JavaScript开发Node.js平台的原因之一。关于JavaScript单线程执行可以参考博主的另一篇博文：<a href=\"http://greengerong.com/blog/2015/10/27/javascript-single-thread-and-browser-event-loop/\">JavaScript单线程和浏览器事件循环简述</a>。</p>\n\n<p>那么对于下面这段异步代码，我们又如何做性能监测呢？</p>\n\n<pre>\n<code>var foo = function(){ setTimeout(..., 2000); },\n    bar = function(){ $.get(...).success(...); },\n    baz = function(){ ... };\n\nfoo();\nbar();\nbaz();\n</code></pre>\n\n<p>在这段代码中，引入了setTimeout和AJAX异步调用。其中AJAX回调和setTimeout回调时间顺序很难确定，因此给这段代码引入性能检测代码并不像上面的顺序执行代码一样那么简单了。如果我们需要强行加入性能的检测，则会在setTimeout和$.get回调中插入相关的hook代码并并记录执行时间，这样我们的业务代码也会变得非常混乱，就像一团&ldquo;意大利拉面&rdquo;一样（What the fuck！）。</p>\n\n<h4>zone.js简介</h4>\n\n<p>在本文开篇提到zone.js为JavaScript提供了执行上下文，可以在异步任务之间进行持久性传递。该是zone.js上场的时候了。zone.js采用猴子补丁（Monkey-patched）的暴力方式将JavaScript中的异步任务都包裹了一层，使得这些异步任务都将运行在zone的上下文中。每一个异步的任务在zone.js都被当做为一个Task，并在Task的基础上zone.js为开发者提供了执行前后的钩子函数（hook）。这些钩子函数包括：</p>\n\n<ul>\n	<li>onZoneCreated：产生一个新的zone对象时的钩子函数。zone.fork也会产生一个继承至基类zone的新zone，形成一个独立的zone上下文；</li>\n	<li>beforeTask：zone Task执行前的钩子函数；</li>\n	<li>afterTask：zone Task执行完成后的钩子函数；</li>\n	<li>onError：zone运行Task时候的异常钩子函数；</li>\n</ul>\n\n<p>并且zone.js对JavaScript中的大多数异步事件都做了包裹封装，它们包括：</p>\n\n<ul>\n	<li>zone.alert;</li>\n	<li>zone.prompt;</li>\n	<li>zone.requestAnimationFrame、zone.webkitRequestAnimationFrame、zone.mozRequestAnimationFrame;</li>\n	<li>zone.addEventListener;</li>\n	<li>zone.addEventListener、zone.removeEventListener;</li>\n	<li>zone.setTimeout、zone.clearTimeout、zone.setImmediate;</li>\n	<li>zone.setInterval、zone.clearInterval</li>\n</ul>\n\n<p>以及对promise、geolocation定位信息、websocket等也进行了包裹封装，你可以在这里找到它们<a href=\"https://github.com/angular/zone.js/tree/master/lib/patch\">https://github.com/angular/zone.js/tree/master/lib/patch</a>。</p>\n\n<p>下面我们先来看一个简单的zone.js示例：</p>\n\n<pre>\n<code>var log = function(phase){\n    return function(){\n        console.log(&quot;I am in zone.js &quot; + phase + &quot;!&quot;);\n    };\n};\n\nzone.fork({\n    onZoneCreated: log(&quot;onZoneCreated&quot;),\n    beforeTask: log(&quot;beforeTask&quot;),\n    afterTask: log(&quot;afterTask&quot;),\n}).run(function(){\n    var methodLog = function(func){\n        return function(){\n            console.log(&quot;I am from &quot; + func + &quot; function!&quot;);\n        };\n    },\n    foo = methodLog(&quot;foo&quot;),\n    bar = methodLog(&quot;bar&quot;),\n    baz = function(){\n        setTimeout(methodLog(&#39;baz in setTimeout&#39;), 0);\n    };\n\n    foo();\n    baz();\n    bar();\n});\n</code></pre>\n\n<p>执行这段示例代码的输出是：</p>\n\n<pre>\n<code>I am in zone.js beforeTask!\nI am from foo function!\nI am from bar function!\nI am in zone.js afterTask!\n\nI am in zone.js onZoneCreated!\nI am in zone.js beforeTask!\nI am from baz in setTimeout function!\nI am in zone.js afterTask!\n</code></pre>\n\n<p>从上面的输出结果，我们能够看出在zone.js中将run方法块分为了两个Task，它们分别是方法体运行时的Task和异步setTimeout的Task。并且我们能够在这些Task的创建，执行前后拦截并做一些有意义的事情。</p>\n\n<p>在zone.js中fork方法会产生一个继承至zone的子类，并在fork函数中可以配置特定的钩子方法，形成独立的zone上下文。而run方法则是启动执行业务代码的对外接口。</p>\n\n<p>同时zone也支持父子继承，以及它也定义了一套DSL语法，支持$、+、-的前缀。</p>\n\n<ul>\n	<li>$会传递父类zone的钩子函数，便于对zone钩子函数执行的控制；</li>\n	<li>-代表在父zone的钩子函数之前运行本钩子函数；</li>\n	<li>+则与之相反，代表在父zone的钩子函数之后运行本钩子函数</li>\n</ul>\n\n<p>更多的语法使用，请参考zone.js github首页文档<a href=\"https://github.com/angular/zone.js\">https://github.com/angular/zone.js</a>。</p>\n\n<h4>引入zone.js</h4>\n\n<p>有了上面的这些关于zone.js的基础知识，在本文开始的遗留问题我们就可以迎刃而解了。下面这段代码是来自zone.js项目的示例代码：<a href=\"https://github.com/angular/zone.js/blob/master/example/profiling.html\">https://github.com/angular/zone.js/blob/master/example/profiling.html</a></p>\n\n<pre>\n<code>var profilingZone = (function () {\n    var time = 0,\n        timer = performance ?\n                    performance.now.bind(performance) :\n                    Date.now.bind(Date);\n    return {\n      beforeTask: function () {\n        this.start = timer();\n      },\n      afterTask: function () {\n        time += timer() - this.start;\n      },\n      time: function () {\n        return Math.floor(time*100) / 100 + &#39;ms&#39;;\n      },\n      reset: function () {\n        time = 0;\n      }\n    };\n  }());\n\n  zone.fork(profilingZone).run(function(){\n\n     //业务逻辑代码\n\n  });\n</code></pre>\n\n<p>这里在beforeTask中启动了时间计算，并在afterTask中计算出当前累积的花费的时间。因此我们在业务代码的逻辑中就可以随时利用zone.time()来获取当前耗时了。</p>\n\n<h4>zone.js的实现</h4>\n\n<p>了解了zone.js的时候之后，或许你会像我一样感觉很神奇，它是如何实现的呢？</p>\n\n<p>下面是zone.js中browser.ts的代码片段（<a href=\"https://github.com/angular/zone.js/blob/master/lib/patch/browser.ts\">https://github.com/angular/zone.js/blob/master/lib/patch/browser.ts</a>）：</p>\n\n<pre>\n<code>export function apply() {\n  fnPatch.patchSetClearFunction(global, global.Zone, [\n    [&#39;setTimeout&#39;, &#39;clearTimeout&#39;, false, false],\n    [&#39;setInterval&#39;, &#39;clearInterval&#39;, true, false],\n    [&#39;setImmediate&#39;, &#39;clearImmediate&#39;, false, false],\n    [&#39;requestAnimationFrame&#39;, &#39;cancelAnimationFrame&#39;, false, true],\n    [&#39;mozRequestAnimationFrame&#39;, &#39;mozCancelAnimationFrame&#39;, false, true],\n    [&#39;webkitRequestAnimationFrame&#39;, &#39;webkitCancelAnimationFrame&#39;, false, true]\n  ]);\n\n  fnPatch.patchFunction(global, [\n    &#39;alert&#39;,\n    &#39;prompt&#39;\n  ]);\n\n  eventTargetPatch.apply();\n\n  propertyDescriptorPatch.apply();\n\n  promisePatch.apply();\n\n  mutationObserverPatch.patchClass(&#39;MutationObserver&#39;);\n  mutationObserverPatch.patchClass(&#39;WebKitMutationObserver&#39;);\n\n  definePropertyPatch.apply();\n\n  registerElementPatch.apply();\n\n  geolocationPatch.apply();\n\n  fileReaderPatch.apply();\n}\n</code></pre>\n\n<p>从这里我们能看到，zone.js对浏览器中的setTimeout、setInterval、setImmediate、以及事件、promise、地理信息geolocation都做了特殊处理。那么这些处理是怎么处理的呢？下面是关于fnPatch.patchSetClearFunction的实现代码，来自zone.js中functions.ts（<a href=\"https://github.com/angular/zone.js/blob/master/lib/patch/functions.ts\">https://github.com/angular/zone.js/blob/master/lib/patch/functions.ts</a>）的代码片段：</p>\n\n<pre>\n<code>export function patchSetClearFunction(window, Zone, fnNames) {\n  function patchMacroTaskMethod(setName, clearName, repeating, isRaf) {\n    //浏览器原生方法留存\n    var setNative = window[setName];\n    var clearNative = window[clearName];\n    var ids = {};\n\n    if (setNative) {\n      var wtfSetEventFn = wtf.createEvent(&#39;Zone#&#39; + setName + &#39;(uint32 zone, uint32 id, uint32 delay)&#39;);\n      var wtfClearEventFn = wtf.createEvent(&#39;Zone#&#39; + clearName + &#39;(uint32 zone, uint32 id)&#39;);\n      var wtfCallbackFn = wtf.createScope(&#39;Zone#cb:&#39; + setName + &#39;(uint32 zone, uint32 id, uint32 delay)&#39;);\n\n      // 对浏览器原生方法的包裹封装\n      window[setName] = function () {\n        return global.zone[setName].apply(global.zone, arguments);\n      };\n\n      // 对浏览器原生方法的包裹封装\n      window[clearName] = function () {\n        return global.zone[clearName].apply(global.zone, arguments);\n      };\n\n\n      // 创建自己包裹方法，由上面的wind[setName]转移到这里执行.\n      Zone.prototype[setName] = function (fn, delay) {\n\n        var callbackFn = fn;\n        if (typeof callbackFn !== &#39;function&#39;) {\n          // force the error by calling the method with wrong args\n          setNative.apply(window, arguments);\n        }\n        var zone = this;\n        var setId = null;\n        // wrap the callback function into the zone.\n        arguments[0] = function() {\n          var callbackZone = zone.isRootZone() || isRaf ? zone : zone.fork();\n          var callbackThis = this;\n          var callbackArgs = arguments;\n          return wtf.leaveScope(\n              wtfCallbackFn(callbackZone.$id, setId, delay),\n              callbackZone.run(function() {\n                if (!repeating) {\n                  delete ids[setId];\n                  callbackZone.removeTask(callbackFn);\n                }\n                return callbackFn.apply(callbackThis, callbackArgs);\n              })\n          );\n        };\n        if (repeating) {\n          zone.addRepeatingTask(callbackFn);\n        } else {\n          zone.addTask(callbackFn);\n        }\n        setId = setNative.apply(window, arguments);\n        ids[setId] = callbackFn;\n        wtfSetEventFn(zone.$id, setId, delay);\n        return setId;\n      };\n      ......\n\n    }\n  }\n  fnNames.forEach(function(args) {\n    patchMacroTaskMethod.apply(null, args);\n  });\n};\n</code></pre>\n\n<p>在上面的代码中，首先会将浏览器的原生方法保存在setNative中以便将会重用。紧接着zone.js就开始了它的暴力行为，覆盖window[setName]和window[clearName]然后将对setName的调用转到自身的zone[setName]的调用，zone.js就是如此暴力的对浏览器原生对象实现了拦截转移。然后它会在Task执行的前后调用自身的addRepeatingTask、addTask以及wtf事件来应用注册上的所有钩子函数。</p>\n\n<p>到这里相信作为读者的你已经明白了zone.js的实现机制了，是不是和笔者一样有种&ldquo;简单粗暴&rdquo;的感觉？但是它真的很强大，为我们实现了对异步Task的跟踪、分析等。</p>\n\n<h4>zone.js应用场景</h4>\n\n<p>zone.js能实现异步Task跟踪，分析，错误记录、开发调试跟踪等，这些都是zone.js场景的应用场景。你也可以在<a href=\"https://github.com/angular/zone.js/tree/master/example\">https://github.com/angular/zone.js/tree/master/example</a>看见更多的示例代码，以及Brian在ng-conf 2014关于zone.js的演讲视频:&nbsp;<a href=\"https://www.youtube.com/watch?v=3IqtmUscE_U\">https://www.youtube.com/watch?v=3IqtmUscE_U</a>.</p>\n\n<p>当然对于一些特定的业务分析zone.js也有它很好的运用场景。如果你使用过Angular1的开发，那么也许你还能记忆犹新的想起：使用第三方事件或者ajax却忘记$scope.$apply的场景吧。在Angular1中如果在非Angular的上下文改变数据Model，Angular是无法预知的，因此也不会触发界面的更新。所以我们不得不显示的调用$scope.$apply或者$timeout来触发界面的更新。Angular框架为了更多的获知变化的事件，不得不为封装了一整套框架内置的服务和指令，如ngClick、ngChange、$http,$timeout等，这也增加了Angular1的学习成本。</p>\n\n<p>也是为了解决Angular1的这一些列问题，Angular2团队引入了zone.js，放弃自定义这类服务和指令，相反而是拥抱浏览器的原生对象和方法。所以在Angular2中可以使用浏览器的任何事件了，只需要括号模板语法的标识：(eventName),等价于on-eventName；也可以直接使用浏览器的原生对象了，如setTimeout，addEventListener、promise、fetch等。</p>\n\n<p>当然，zone.js也能应用于Angular1的项目之中。示例代码如下（<a href=\"http://jsbin.com/kenilivuvi/edit?html,js,output\">http://jsbin.com/kenilivuvi/edit?html,js,output</a>）：</p>\n\n<pre>\n<code>angular.module(&quot;com.ngbook.demo&quot;, [])\n    .controller(&quot;DemoController&quot;, [&#39;$scope&#39;, function($scope){\n\n        zone.fork({\n            afterTask: function(){\n                var phase = $scope.$root.$$phase;\n                if([&#39;$apply&#39;, &#39;$digest&#39;].indexOf(phase) === -1) {\n                    $scope.$apply();\n                 }\n            }\n        }).run(function(){\n\n            setTimeout(function(){\n                $scope.fromZone = &quot;I am from zone with setTimeout!&quot;;\n            }, 2000);\n        });\n\n    }]);\n</code></pre>\n\n<p>在示例代码中，在每次Task的完成后都会尝试$scope.$apply，强制将Model数据的改变更新到UI界面。对于在Angular1中使用zone.js更多的地方应该是在Directive中，同时也可以将zone的创建过程封装为服务（工厂方法，每次返回一个全新的zone对象）。在Angular2中也有同样zone的封装，它被称为ngZone（<a href=\"https://github.com/angular/angular/blob/master/modules/angular2/src/core/zone/ng_zone.ts\">https://github.com/angular/angular/blob/master/modules/angular2/src/core/zone/ng_zone.ts</a>）。</p>\n', '2', '0', '0', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-10 15:13:54');
INSERT INTO `bbs_post` VALUES ('11', '11', '1', '0', '(译)你应该知道的jQuery技巧', '<p>帮助提高你jQuery应用的简单小技巧。</p>\n\n<ol>\n	<li>回到顶部按钮</li>\n	<li>图片预加载</li>\n	<li>判断图片是否加载完</li>\n	<li>自动修补破损图像</li>\n	<li>Hover切换class类</li>\n	<li>禁用输入</li>\n	<li>停止正在加载的链接</li>\n	<li>toggle fade/slide</li>\n	<li>简单的手风琴</li>\n	<li>使两个DIV同等高度</li>\n	<li>在浏览器标签/新窗口打开外部链接</li>\n	<li>根据文本获取元素</li>\n	<li>可见变化的触发</li>\n	<li>Ajax调用错误处理</li>\n	<li>链式操作</li>\n</ol>\n\n<h3>回到顶部按钮</h3>\n\n<p>利用jQuery里的animate和scrollTop方法，你便不需要使用插件创建简单的滚动到顶部动画。</p>\n\n<pre>\n<code>// Back to top\n$(&#39;.top&#39;).click(function (e) {\n  e.preventDefault();\n  $(&#39;html, body&#39;).animate({scrollTop: 0}, 800);\n});\n&lt;!-- Create an anchor tag --&gt;\n&lt;a class=&quot;top&quot; href=&quot;#&quot;&gt;Back to top&lt;/a&gt;\n</code></pre>\n\n<p>通过scrollTop的值来改变你想要滚动到的位置。其实你就是做了：在接下来的800毫秒中让页面滚动，直到它滚动到文档的顶部。</p>\n\n<p><strong>备注</strong>：来看一些scrollTop的调皮行为&nbsp;。</p>\n\n<h3>图片预加载</h3>\n\n<p>如果你的网页使用了很多隐藏图片文件（例如：鼠标悬停展示的图片），那么图片的预加载是有意义的：</p>\n\n<pre>\n<code>$.preloadImages = function () {\n  for (var i = 0; i &lt; arguments.length; i++) {\n    $(&#39;&lt;img&gt;&#39;).attr(&#39;src&#39;, arguments[i]);\n  }\n};\n\n$.preloadImages(&#39;img/hover-on.png&#39;, &#39;img/hover-off.png&#39;);\n</code></pre>\n\n<h3>判断图片是否加载完</h3>\n\n<p>有时候你可能需要检查图像是否已经加载完成，以便于可以继续执行相应的js代码：</p>\n\n<pre>\n<code>$(&#39;img&#39;).load(function () {\n  console.log(&#39;image load successful&#39;);\n});\n</code></pre>\n\n<p>你还可以检查一个特定的图片是否加载完并且被带有Id或者class的<code>&lt;img&gt;</code>标签代替。</p>\n\n<h3>自动修补破损图像</h3>\n\n<p>如果你碰巧发现在你的网站上发现破损的图像链接，一个个去替代他们是痛苦的。这个简单的代码可以节省很多的麻烦：</p>\n\n<pre>\n<code>$(&#39;img&#39;).on(&#39;error&#39;, function () {\n  if(!$(this).hasClass(&#39;broken-image&#39;)) {\n    $(this).prop(&#39;src&#39;, &#39;img/broken.png&#39;).addClass(&#39;broken-image&#39;);\n  }\n});\n</code></pre>\n\n<p>即使你没有任何断开的链接，加入这代码也不会有任何影响。</p>\n\n<h3>Hover切换class类</h3>\n\n<p>比方说，当用户将鼠标悬停在你页面上的元素时，你想改变其视觉效果。当用户鼠标悬停在元素上，你可以在该元素上添加一个class类，当鼠标停止悬停事件时移除此class类：</p>\n\n<pre>\n<code>$(&#39;.btn&#39;).hover(function () {\n  $(this).addClass(&#39;hover&#39;);\n}, function () {\n  $(this).removeClass(&#39;hover&#39;);\n});\n</code></pre>\n\n<p>如果你想要一个更简单的方式使用toggleClass方法，则仅仅需要添加必要的CSS：</p>\n\n<pre>\n<code>$(&#39;.btn&#39;).hover(function () {\n  $(this).toggleClass(&#39;hover&#39;);\n});\n</code></pre>\n\n<p><em>备注</em>：CSS在这种情况下使用是一个快速的解决方案，但要知道这点知识依旧是值得去了解下的。</p>\n\n<h3>禁用输入</h3>\n\n<p>有时你可能需要用表单的提交按钮或者某个输入框直到用户执行了某个动作（比如：检查&ldquo;我已阅读条款&rdquo;复选框）。在你的输入框上设置disabled属性，然后当你需要的时候启用该属性：</p>\n\n<pre>\n<code>$(&#39;input[type=&quot;submit&quot;]&#39;).prop(&#39;disabled&#39;, true);\n</code></pre>\n\n<p>你需要做的只是需要在输入框上再次运行prop方法，但设置的被禁用值是false：</p>\n\n<pre>\n<code>$(&#39;input[type=&quot;submit&quot;]&#39;).prop(&#39;disabled&#39;, false);\n</code></pre>\n\n<h3>停止正在加载的链接</h3>\n\n<p>有时你不想链接到特定的网页或者重新载入页面；你可能想让他们做一些其他事情，如触发一些其他的脚本。这是防止违约行动的技巧：</p>\n\n<pre>\n<code>$(&#39;a.no-link&#39;).click(function (e) {\n  e.preventDefault();\n});\n</code></pre>\n\n<h3>toggle fade/slide</h3>\n\n<p>滑动和淡入/淡出 是我们在jQuery中经常大量使用的动画。你可能仅仅想在用户做某些点击事件的时候显示一个元素，这时候需要淡入/淡出或者滑动方法。但是如果你需要那个元素在你第一次点击的时候出现，在第二次点击的时候消失，代码如下：</p>\n\n<pre>\n<code>// Fade\n$(&#39;.btn&#39;).click(function () {\n  $(&#39;.element&#39;).fadeToggle(&#39;slow&#39;);\n});\n\n// Toggle\n$(&#39;.btn&#39;).click(function () {\n  $(&#39;.element&#39;).slideToggle(&#39;slow&#39;);\n});\n</code></pre>\n\n<h3>简单的手风琴</h3>\n\n<p>这是个简单快速的方法创建一个手风琴：</p>\n\n<pre>\n<code>// Close all panels\n$(&#39;#accordion&#39;).find(&#39;.content&#39;).hide();\n\n// Accordion\n$(&#39;#accordion&#39;).find(&#39;.accordion-header&#39;).click(function () {\n  var next = $(this).next();\n  next.slideToggle(&#39;fast&#39;);\n  $(&#39;.content&#39;).not(next).slideUp(&#39;fast&#39;);\n  return false;\n});\n</code></pre>\n\n<p>通过添加这个脚本，你需要做的则是必要的HTML操作在你的页面上。</p>\n\n<h3>使两个DIV同等高度</h3>\n\n<p>有时你会想要两个DIV有相同的高度，无论他们都有什么内容：</p>\n\n<pre>\n<code>$(&#39;.div&#39;).css(&#39;min-height&#39;, $(&#39;.main-div&#39;).height());\n</code></pre>\n\n<p>这个例子设置了DIV的最小高度，这意味着它的高度只可以比这个设置的高度大而不能小。然而，一个更灵活的方法是循环的一组元素，并设置将最高元素的高度作为高度：</p>\n\n<pre>\n<code>var $columns = $(&#39;.column&#39;);\nvar height = 0;\n$columns.each(function () {\n  if ($(this).height() &gt; height) {\n    height = $(this).height();\n  }\n});\n$columns.height(height);\n</code></pre>\n\n<p>如果你想要所有的列有相同的高度：</p>\n\n<pre>\n<code>var $rows = $(&#39;.same-height-columns&#39;);\n$rows.each(function () {\n  $(this).find(&#39;.column&#39;).height($(this).height());\n});\n</code></pre>\n\n<h3>在浏览器标签/新窗口打开外部链接</h3>\n\n<p>在新的浏览器标签或窗口中打开外部链接，并确保在同一个标签或窗口中打开的是同一个源的链接：</p>\n\n<pre>\n<code>$(&#39;a[href^=&quot;http&quot;]&#39;).attr(&#39;target&#39;, &#39;_blank&#39;);\n$(&#39;a[href^=&quot;//&quot;]&#39;).attr(&#39;target&#39;, &#39;_blank&#39;);\n$(&#39;a[href^=&quot;&#39; + window.location.origin + &#39;&quot;]&#39;).attr(&#39;target&#39;, &#39;_self&#39;);\n</code></pre>\n\n<p><em>备注</em>：window.location.origin 在IE10不工作。</p>\n\n<h3>根据文本获取元素</h3>\n\n<p>通过jQuery中的contains()选择器，你能找到一个元素内的文本内容。如果文本不存在，则这个元素将被隐藏：</p>\n\n<pre>\n<code>var search = $(&#39;#search&#39;).val();\n$(&#39;div:not(:contains(&quot;&#39; + search + &#39;&quot;))&#39;).hide();\n</code></pre>\n\n<h3>可见变化的触发</h3>\n\n<p>当用户不再聚焦或者重新聚焦一个标签时触发javascript脚本：</p>\n\n<pre>\n<code>$(document).on(&#39;visibilitychange&#39;, function (e) {\n  if (e.target.visibilityState === &quot;visible&quot;) {\n    console.log(&#39;Tab is now in view!&#39;);\n  } else if (e.target.visibilityState === &quot;hidden&quot;) {\n    console.log(&#39;Tab is now hidden!&#39;);\n  }\n});\n</code></pre>\n\n<h3>Ajax调用错误处理</h3>\n\n<p>当一个Ajax调用返回一个404或500的错误时，将执行该错误处理。如果该处理未定义，则其他jQuery代码便可能不会执行了。定义一个全局Ajax错误处理程序：</p>\n\n<pre>\n<code>$(document).ajaxError(function (e, xhr, settings, error) {\n  console.log(error);\n});\n</code></pre>\n\n<h3>链式操作</h3>\n\n<p>jQuery允许通过链式操作来减轻反复查询DOM和创建多个jQuery对象的过程。比如下面是你的方法调用：</p>\n\n<pre>\n<code>$(&#39;#elem&#39;).show();\n$(&#39;#elem&#39;).html(&#39;bla&#39;);\n$(&#39;#elem&#39;).otherStuff();\n</code></pre>\n\n<p>这代码可以通过链式大大的提高：</p>\n\n<pre>\n<code>$(&#39;#elem&#39;)\n  .show()\n  .html(&#39;bla&#39;)\n  .otherStuff();\n</code></pre>\n\n<p>另一个方法是在一个可变的元素缓存（$作为前置）：</p>\n\n<pre>\n<code>var $elem = $(&#39;#elem&#39;);\n$elem.hide();\n$elem.html(&#39;bla&#39;);\n$elem.otherStuff();\n</code></pre>\n\n<p>链式和jQuery缓存方法是最好的做法，导致更短、更快的代码。</p>\n\n<p>翻译：野兽</p>\n\n<p>英文原文地址：<a href=\"https://github.com/AllThingsSmitty/jquery-tips-everyone-should-know\">https://github.com/AllThingsSmitty/jquery-tips-everyone-should-know</a>。</p>\n', '2', '1', '0', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-10 15:15:00');
INSERT INTO `bbs_post` VALUES ('12', '7', '1', '0', 'JavaScript多线程之HTML5 Web Worker', '<p><img alt=\"桥和多线路电线\" src=\"http://greengerong.github.io/images/blog_img/%E6%A1%A5%E5%92%8C%E5%A4%9A%E7%BA%BF%E8%B7%AF%E7%94%B5%E7%BA%BF.jpg\" /></p>\n\n<p>在博主的前些文章<a href=\"http://greengerong.com/blog/2015/10/22/promisede-miao-yong/\">Promise的前世今生和妙用技巧</a>和<a href=\"http://greengerong.com/blog/2015/10/27/javascript-single-thread-and-browser-event-loop/\">JavaScript单线程和浏览器事件循环简述</a>中都曾提到了HTML5 Web Worker这一个概念。在<a href=\"http://greengerong.com/blog/2015/10/27/javascript-single-thread-and-browser-event-loop/\">JavaScript单线程和浏览器事件循环简述</a>中讲述了JavaScript出于界面元素访问安全的考虑，所以JavaScript运行时一直是被实现为单线程执行的；这也意味着我们应该尽量的避免在JavaScript中执行较长耗时的操作（如大量for循环的对象diff等）或者是长时间I/O阻塞的任务，特别是对于CPU计算密集型的操作。</p>\n\n<p>例如在JavaScript中尝试计算像<code>fibonacci</code>这类计算密集型的操作，就会导致整个页面体验被blocked。HTML5 Web Worker的出现让我们在不阻塞当前JavaScript线程的情况下，在当前的JavaScript执行线程中可利用Worker这个类新开辟一个额外的线程来加载和运行特定的JavaScript文件，这个新的线程和JavaScript的主线程之间并不会互相影响和阻塞执行的；并且在Web Worker中提供这个新线程和JavaScript主线程之间数据交换的接口：postMessage和onmessage事件。它和C# WinForm中的BackgroundWorker很类似。</p>\n\n<h3>Web Worker实现fibonacci计算</h3>\n\n<p>利用HTML5 Web Worker实现<code>fibonacci</code>可像如下所示（<a href=\"http://plnkr.co/edit/IoXkPw?p=preview\">plnkr在线demo</a>）：</p>\n\n<p>fibonacci.js Worker JavaScript文件：</p>\n\n<pre>\n<code>(function() {\n  var fibonacci = function(n) {\n    return n &lt; 2 ? 1 : (fibonacci(n - 1) + fibonacci(n - 2));\n  };\n\n  onmessage = function(event) {\n    postMessage({\n      input: event.data,\n      result: fibonacci(event.data)\n    });\n  };\n\n})();\n</code></pre>\n\n<p>在fibonacci.js中利用onmessage方法来监听主线程发送的fibonacci计算请求，和利用postMessage返回计算的结果到请求线程。</p>\n\n<p>script.js 主线程JavaScript文件：</p>\n\n<pre>\n<code>$(function() {\n  var $input = $(&#39;#input&#39;),\n    $btn = $(&#39;#btn&#39;),\n    $result = $(&#39;#result&#39;),\n    worker = new Worker(&#39;fibonacci.js&#39;),\n    timeKey = function(val) {\n      return &#39;fibonacci(&#39; + val + &#39;)&#39;;\n    };\n\n  worker.onmessage = function(event) {\n    console.timeEnd(timeKey(event.data.input));\n    $result.text(event.data.result);\n  };\n\n  $btn.on(&#39;click&#39;, function() {\n    var val = parseInt($input.val(), 10);\n    if (val) {\n      console.time(timeKey(val));\n      $result.text(&#39;?&#39;)\n      worker.postMessage(val);\n    }\n  });\n});\n</code></pre>\n\n<p>在这个JavaScript文件中，利用<code>new Worker(&#39;fibonacci.js&#39;)</code>方式来创建Web Worker对象，并利用Worker对象上的postMessage方法发送请求计算请求，以及利用Worker对象的onmessage的方法接受Worker线程的返回结果，并显示在UI界面上。同时我们也利用了console最新的time API来统计计算所花费的时间。</p>\n\n<p>其显示效果如下：</p>\n\n<p><img alt=\"html5 web worker demo\" src=\"http://greengerong.github.io/images/blog_img/html5-web-worker-demo.png\" /></p>\n\n<p>在console中打印的时间信息为：</p>\n\n<pre>\n<code>fibonacci(10): 1.022ms\nfibonacci(20): 1.384ms\nfibonacci(30): 22.065ms\nfibonacci(40): 1744.352ms\nfibonacci(50): 202140.027ms\n</code></pre>\n\n<p>从这里时间输出可以看出，在计算n为40的<code>fibonacci</code>&nbsp;开始时间开始急速的加长，在UI中返回结果的时间也逐渐变长；但是在Web Worker后台计算的时候，它并不会阻塞我们的UI界面的其他交互。</p>\n\n<h3>Web Worker总结</h3>\n\n<p>Web Worker在这类耗时计算密集型操作中，显得特别实用。在Web Worker中我们可以实现：</p>\n\n<ol>\n	<li>可以加载一个JS进行大量的复杂计算而不挂起主进程，并通过postMessage，onmessage进行通信；</li>\n	<li>可以在worker中通过importScripts(url)加载另外的脚本文件；</li>\n	<li>可以使用 setTimeout()，clearTimeout()，setInterval()，clearInterval()；</li>\n	<li>可以使用XMLHttpRequest来发送请求，以及访问navigator的部分属性。</li>\n</ol>\n\n<p>但是它也存在一些来自浏览器<code>安全沙盒</code>的限制：</p>\n\n<ol>\n	<li>不能加载跨域的JavaScript文件；</li>\n	<li>如文件开始所说，考虑到JavaScript操作DOM的安全性问题，在Web Worker中不能访问界面中的DOM信息，对于DOM的访问操作都必须委托给JavaScript主线程来操作；因此HTML5 Web Worker的出现的出现，并没有改变JavaScript单线程执行的这个事实；</li>\n	<li>还有就是Web Worker的浏览器兼容性问题。它的浏览器兼容性图如下：</li>\n</ol>\n\n<p><img alt=\"html5 web worker浏览器兼容性\" src=\"http://greengerong.github.io/images/blog_img/html5-web-worker-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7.png\" /></p>\n\n<p>更多关于Web Worker的资料，请参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\">https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers</a>。</p>\n', '6', '0', '5', '0', '0', '1', '0000-00-00 00:00:00', '1', '2016-05-10 15:16:20');
INSERT INTO `bbs_post` VALUES ('13', '8', '1', '0', '自定义Angular插件 - 网站用户引导', '<p>最近由于项目进行了较大的改版，为了让用户能够适应这次新的改版，因此在系统中引入了&ldquo;用户引导&rdquo;功能，对于初次进入系统的用户一些简单的使用培训training。对于大多数网站来说，这是一个很常见的功能。所以在开发这个任务之前，博主尝试将其抽象化，独立于现有系统的业务逻辑，将其封装为一个通用的插件，使得代码更容易扩展和维护。</p>\n\n<p>无图无真相，先上图：</p>\n\n<p><img alt=\"training demo\" src=\"http://greengerong.github.io/images/blog_img/training-demo.png\" /></p>\n\n<p>关于这款trainning插件的使用很简单，它采用了类似Angular路由一样的配置，只需要简单的配置其每一步training信息。</p>\n\n<ul>\n	<li>title：step的标题信息；</li>\n	<li>template/templateUrl: step的内容模板信息。这类可以配置html元素，或者是模板的url地址，同时templateUrl也支持Angular route一样的function语法；</li>\n	<li>controller: step的控制器配置；在controller中可注入如下参数：当前step &ndash; currentStep、所有step的配置 &ndash; trainnings、当前step的配置 &ndash; currentTrainning、以及下一步的操作回调 &ndash; trainningInstance（其中nextStep：为下一步的回调，cancel为取消用户引导回调）；</li>\n	<li>controllerAs: controller的别名；</li>\n	<li>resolve：在controller初始化前的数据配置，同Angular路由中的resolve；</li>\n	<li>locals：本地变量，和resolve相似，可以传递到controller中。区别之处在于它不支持function调用，对于常量书写会比resolve更方便；</li>\n	<li>placement: step容器上三角箭头的显示方位，</li>\n	<li>position: step容器的具体显示位置，这是一个绝对坐标；可以传递<code>{left: 100, top: 100}</code>的绝对坐标，也可以是<code>#stepPanelHost</code>配置相对于此元素的placement位置。同时它也支持自定义function和注入Angular的其他组件语法。并且默认可注入：所有step配置 &ndash; trainnings,当前步骤 &ndash; step，当前step的配置 &ndash; currentTrainning，以及step容器节点 &ndash; stepPanel；</li>\n	<li>backdrop：是否需要显示遮罩层，默认显示，除非显示声明为false配置，则不会显示遮罩层；</li>\n	<li>stepClass：每一个step容器的样式信息；</li>\n	<li>backdropClass： 每一个遮罩层的样式信息。</li>\n</ul>\n\n<p>了解了这些配置后，并根据特定需求定制化整个用户引导的配置信息后，我们就可以使用trainningService的trainning方法来在特定实际启动用户引导，传入参数为每一步step的配置信息。并可以注册其done或者cancel事件：</p>\n\n<pre>\n<code>trainningService.trainning(trainningCourses.courses)\n    .done(function() {\n        vm.isDone = true;\n    });\n</code></pre>\n\n<p>下面是一个演示的配置信息：</p>\n\n<pre>\n<code>    .constant(&#39;trainningCourses&#39;, {\n                courses: [{\n                    title: &#39;Step 1:&#39;,\n                    templateUrl: &#39;trainning-content.html&#39;,\n                    controller: &#39;StepPanelController&#39;,\n                    controllerAs: &#39;stepPanel&#39;,\n                    placement: &#39;left&#39;,\n                    position: &#39;#blogControl&#39;\n                },{\n                    title: &#39;Step 3:&#39;,\n                    templateUrl: &#39;trainning-content.html&#39;,\n                    controller: &#39;StepPanelController&#39;,\n                    controllerAs: &#39;stepPanel&#39;,\n                    placement: &#39;top&#39;,\n                    position: {\n                        top: 200,\n                        left: 100\n                    }\n                },\n                    ...\n                {\n                    stepClass: &#39;last-step&#39;,\n                    backdropClass: &#39;last-backdrop&#39;,\n                    templateUrl: &#39;trainning-content-done.html&#39;,\n                    controller: &#39;StepPanelController&#39;,\n                    controllerAs: &#39;stepPanel&#39;,\n                    position: [&#39;$window&#39;, &#39;stepPanel&#39;, function($window, stepPanel) {\n                        // 自定义函数，使其屏幕居中\n                        var win = angular.element($window);\n                        return {\n                            top: (win.height() - stepPanel.height()) / 2,\n                            left: (win.width() - stepPanel.width()) / 2\n                        }\n                    }]\n                }]\n            })\n</code></pre>\n\n<p>本文插件源码和演示效果唯一codepen上，效果如下：</p>\n\n<p><iframe frameborder=\"0\" height=\"385\" id=\"cp_embed_pjwXQW\" name=\"CodePen Embed\" scrolling=\"no\" src=\"http://codepen.io/greengerong/embed/pjwXQW?height=385&amp;theme-id=0&amp;slug-hash=pjwXQW&amp;default-tab=result&amp;user=greengerong\" title=\"CodePen Embed\"></iframe></p>\n\n<p>在trainning插件的源码设计中，包含如下几个要点：</p>\n\n<ul>\n	<li>提供service api。因为关于trainning这个插件，它是一个全局的插件，正好在Angular中所有的service也是单例的，所以将用户引导逻辑封装到Angular的service中是一个不错的设计。但对于trainning的每一步展示内容信息则是DOM操作，在Angular的处理中它不该存在于service中，最佳的方式是应该把他封装到Directive中。所以这里采用Directive的定义，并在service中compile，然后append到body中。</li>\n	<li>对于每一个这类独立的插件应该封装一个独立的scope，这样便于在后续的销毁，以及不会与现有的scope变量的冲突。</li>\n	<li>$q对延时触发的结果包装。对于像该trainning插件或者modal这类操作结果采用promise的封装，是一个不错的选择。它取代了回调参数的复杂性，并以流畅API的方式展现，更利于代码的可读性。同时也能与其他Angular service统一返回API。</li>\n	<li>对于controller、controllerAs、resolve、template、templateUrl这类类似路由的处理代码，完全可以移到到你的同类插件中去。它们可以增加插件的更多定制化扩展。关于这部分代码的解释，博主将会在后续文章中为大家推送。</li>\n	<li>利用$injector.invoke动态注入和调用Angular service，这样既能获取Angular其他service注入的扩展性，也能获取到函数的动态性。如上例中的屏幕居中的自定义扩展方式。</li>\n</ul>\n\n<p>这类设计要点，同样可以运用到想modal、alert、overload这类全局插件中。有兴趣的读者，你可以在博主的codepen笔记中阅读这段代码<a href=\"http://codepen.io/greengerong/pen/pjwXQW#0\">http://codepen.io/greengerong/pen/pjwXQW#0</a>。</p>\n', '4', '0', '0', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-10 15:17:42');
INSERT INTO `bbs_post` VALUES ('14', '2', '1', '0', 'CSS尺寸和字体单位-em、px还是%', '<p>在页面整体布局中，页面元素的尺寸大小（长度、宽度、内外边距等）和页面字体的大小也是重要的工作之一。一个合理设置，则会让页面看起来层次分明，重点鲜明，赏心悦目。反之，一个不友好的页面尺寸和字体大小设置，则会增加页面的复杂性，增加用户对页面理解的复杂性；甚至在当下访问终端（iPhone、iPad、PC、Android&hellip;）层出不穷的今天，适应各式各样的访问终端，将成为手中的一块&ldquo;烫手的山芋&rdquo;。所以在近几年，&ldquo;九宫格&rdquo;式的&ldquo;流式布局&rdquo;再度回归。为了提供页面布局，及其它的可维护性、可扩展性，我们尝试将页面元素的大小，以及字体大小都设置为相对值，不再是孤立的固定像素点。使其能在父元素的尺寸变化的同时，子元素也能随之适应变化。以及结合少量最新CSS3的@media查询，来实现&ldquo;响应式布局&rdquo;，bootstrap这类CSS框架大势兴起。</p>\n\n<p>然而在CSS中，W3C文档把尺寸单位划为为两类：相对长度单位和绝对长度单位。然而相对长度单位按照不同的参考元素，又可以分为字体相对单位和视窗相对单位。字体相对单位有：em、ex、ch、rem；视窗相对单位则包含：vw、vh、vmin、vmax几种。绝对定位则是固定尺寸，它们采用的是物理度量单位：cm、mm、in、px、pt以及pc。但在实际应用中，我们使用最广泛的则是em、rem、px以及百分比（%）来度量页面元素的尺寸。</p>\n\n<ol>\n	<li>px：为像素单位。它是显示屏上显示的每一个小点，为显示的最小单位。它是一个绝对尺寸单位；</li>\n	<li>em：它是描述相对于应用在当前元素的字体尺寸，所以它也是相对长度单位。一般浏览器字体大小默认为16px，则2em == 32px；</li>\n	<li>%： 百分比，它是一个更纯粹的相对长度单位。它描述的是相对于父元素的百分比值。如50%，则为父元素的一半。</li>\n</ol>\n\n<p>这里需要注意的是：em是相对于应用于当前当前元素的字体尺寸；而百分比则是相对于父元素的尺寸。如下面示例：</p>\n\n<p>HTML：</p>\n\n<pre>\n<code>&lt;div class=&quot;parent&quot;&gt;\n     &lt;div class=&quot;em-demo&quot;&gt;\n      设置长度为5em demo\n     &lt;/div&gt;\n\n     &lt;div class=&quot;percentage-demo&quot;&gt;\n      设置长度为80% demo\n     &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>CSS：</p>\n\n<pre>\n<code>div{\n    border: 1px dashed #808080;\n    margin:10px\n}\n\n.parent{\n    width: 200px;\n    font-size: 18px;\n}\n\n.em-demo{\n    width: 5em;\n}\n\n.percentage-demo{\n    width: 80%\n}\n</code></pre>\n\n<p>则其效果图为(<a href=\"http://jsbin.com/xihusojale/edit?html,css,output\">http://jsbin.com/xihusojale/edit?html,css,output</a>)：</p>\n\n<p><img alt=\"em percentage demo\" src=\"http://greengerong.github.io/images/blog_img/em-percentage-demo.png\" /></p>\n\n<p>从图上我们可以看出：设置5em的div的第一行字符刚好为5个字符大小，因为如上所说，它是相对于当前元素字体的尺寸， 5 * 18 = 90px。而百分比显示则会比较大一些，因为它是相对于父元素的尺寸比例， 200 * 80% = 160px。</p>\n\n<p>对于px、em和百分比都能设置元素的尺寸和字体大小，但是它们各自有自己所不同的应用场景。不合理的运用，则会导致页面的混乱、难易维护和扩展。对于它们的使用，有如下几点被大家所认同的最佳实践：</p>\n\n<p>&nbsp;</p>\n\n<p><strong>1. 尽量使用相对尺寸单位</strong></p>\n\n<p>&nbsp;</p>\n\n<p>使用相对尺寸单位计量，则在调整页面的布局的时候，不需要遍历所有的内部DOM结构，重新设置内部子元素的尺寸大小，同时它也能更好的适应与多中分辨率和屏幕终端。采用相对定位，并不意味着页面整体的自适应。</p>\n\n<p>当然，对于希望整体网站的&ldquo;响应式设计&rdquo;，适应当今层出不穷的的各类访问终端，相对尺寸布局将发挥更大的价值。我们仅需要利用CSS3的@media查询来设置外围的整体宽度，以及少量在设备上不一致的用户体验。关于&ldquo;响应式布局&rdquo;，可以更多的参考bootstrap这类新兴的CSS框架。</p>\n\n<p>对于相对尺寸单位的设置：em和%因为它们相对的参考物不同，所以它们也有不同的使用场景。如果希望随着当前元素的字体尺寸而改变尺寸，则使用em最佳，如：行高、字体大小。相反，如果是随着父容器或者是整体页面布局而改变尺寸，则使用%更好，如元素的高度和宽度设置。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>2. 只在可预知的元素上使用绝对尺寸</strong></p>\n\n<p>&nbsp;</p>\n\n<p>并不是所有的元素设置相对尺寸就是最佳的。对于如图表icon、如video这类多媒体元素、网页整体的宽度这类可预知尺寸，设置为绝对路径可能反而是最佳的选择。但他们需要试具体场景而定，从而获得最佳体验。不管我们如此设置相对尺寸，但在外层也总会有一些绝对尺寸度量，才可能存在百分比这类相对尺寸设置。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>3. 字体尺寸尽量使用em、rem</strong></p>\n\n<p>&nbsp;</p>\n\n<p>和尽量使用相对尺寸单位一样，为了字体大小的可维护性和伸缩性，W3C更推荐使用em作为字体尺寸单位。需要注意的是，如果存在3层以及3层以上的字体相对尺寸的设置，则对于实际字体大小的计算，就会变得相对麻烦。这个时候，在满足浏览器兼容性的情况下，可以考虑使用CSS3的新特性rem：根据固定根元素的字体大小来设置相对尺寸大小，这也是近几年移动APP所兴起的使用方式。</p>\n\n<p>rem的兼容性，我们可以用<a href=\"http://caniuse.com/#feat=rem\">Can I Use</a>网站获取。</p>\n\n<p><img alt=\"rem 兼容性\" src=\"http://greengerong.github.io/images/blog_img/rem-%E5%85%BC%E5%AE%B9%E6%80%A7.png\" /></p>\n\n<p>&nbsp;</p>\n\n<p><strong>4. @media查询做平台适配，但禁止随处滥用</strong></p>\n\n<p>&nbsp;</p>\n\n<p>如上所说CSS3的@media查询，能帮助我们做到多平台终端的自适应布局，得到一个更好的用户体验。但这绝不意味着我们可以随处滥用它，在CSS代码中存在太多的平台差异的代码，这也会增加代码可读性、维护性的难度。更好的方式则是仅在必须使用它的场景下，合理的使用它，如页面外围的整体宽度，不同显示的菜单栏等。更多的体验适应性，可以移动到使用&ldquo;流式布局&rdquo;来实现。</p>\n\n<p>关于响应式设计，这是对开发周期、成本和平台体验的一个权衡的结果。如果不考虑开发、维护的成本，则为不同平台终端提供不同的页面设计，这样得到的用户体验会更友好。但在实际开发中，开发和维护成本、产品生命周期也是一个重要的权衡标准，而响应式设计则是它们之间的权衡结果。</p>\n', '4', '0', '0', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-10 15:18:29');
INSERT INTO `bbs_post` VALUES ('15', '7', '1', '0', 'HTML5特性速记图', '<p>今天推荐大家一张HTML5特性速记图，供大家平时查阅，也可以打印放在电脑旁帮助速记、速查。此图笔者收集于网络图片。</p>\n\n<p><img alt=\"angualr meet coffeescript\" src=\"http://greengerong.github.io/images/blog_img/HTML5%E7%89%B9%E6%AE%8A%E9%80%9F%E8%AE%B0%E5%9B%BE.PNG\" /></p>\n', '24', '0', '0', '0', '0', '0', '2016-05-11 15:13:11', '1', '2016-05-10 15:19:18');
INSERT INTO `bbs_post` VALUES ('16', '15', '1', '0', '前端获取元素定位位置的法宝', '<p>在前端开发中，我们经常需要定位一个元素。如tooltip、popover或者modal等，或许是我们需要将它们定位在依赖元素的周围或屏幕滚动屏幕中心位置。这对于前端开发的码农来说并不是难事。算出和依赖元素的offset，设置元素的left、right。对于稍复杂的场景我们可能需要考虑被positioned的祖先元素。</p>\n\n<p>但往往不是所有的事情都是这么简单的。笔者最新在项目开发中就遇见这样一个问题：这里的HTML是嵌入的，其来自jpedal商业软件从PDF文件自动生成的；为了展示的样式，jpedal统一使用了 position:absolute和relative来定位PDF元素。然而由于业务的需求，我们需要操作这类HTML。其中一个需求就是需要在每段文字附近显示操作工具条。</p>\n\n<p>对于这类未知的DOM定位，那么我们就需要遍历它的DOM树来计算它的相对位置了。行为下面的这段代码：</p>\n\n<pre>\n<code>    function isStaticPositioned(element) {\n      return (getStyle(element, &#39;position&#39;) || &#39;static&#39; ) === &#39;static&#39;;\n    }\n\n    var parentOffsetEl = function(element) {\n      var docDomEl = $document[0];\n      var offsetParent = element.offsetParent || docDomEl;\n      while (offsetParent &amp;&amp; offsetParent !== docDomEl &amp;&amp; isStaticPositioned(offsetParent) ) {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docDomEl;\n    };\n</code></pre>\n\n<p>在这里，我们会根据元素递归查询它所在的的DOM树中被positioned的最接近的祖先元素，然后才计算它们的相对位置。</p>\n\n<p>这是一段来自Angular-UI bootstrap的$position服务的源码。这也是本文将要提到的获取定位元素位置的法宝。其源码位置在<a href=\"https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js\">https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js</a>。</p>\n\n<p>在$position服务中为我们提供了3个有用的位置服务：position、offset和positionElements。position是计算具体元素的定位位置，返回一个带有width、height、top、left的对象；positionElements则是返回某元素相对于其依赖容器元素的定位位置，一个带有top、left的对象。</p>\n\n<p>笔者为了测试这写API，在jsbin中写了一个特定的指令：</p>\n\n<p>JavaScript:</p>\n\n<pre>\n<code>angular.module(&quot;com.ngbook.demo&quot;, [&#39;ui.bootstrap.position&#39;])\n.directive(&#39;position&#39;, [&#39;$position&#39;, function($position){\n    return {\n        restrict: &#39;EA&#39;,\n        templateUrl: &#39;/position.html&#39;,\n        scope:{\n            title:&quot;@&quot;\n        },\n        link:function(scope, elm, iAttrs){\n        scope.data =  $position.position(elm);\n       }\n    };\n}]);\n</code></pre>\n\n<p>HTML:</p>\n\n<pre>\n<code>&lt;script type=&quot;text/ng-template&quot; id=&quot;/position.html&quot;&gt;\n   &lt;table class=&quot;table&quot;&gt;\n       &lt;thead&gt;\n           &lt;th colspan=&quot;2&quot;&gt;{{title}}&lt;/th&gt;\n       &lt;/thead&gt;\n    &lt;tbody&gt;\n       &lt;tr ng-repeat=&quot;field in [&#39;width&#39;, &#39;height&#39;, &#39;left&#39;, &#39;top&#39;]&quot;&gt;\n       &lt;td&gt;{{field}}&lt;/td&gt;\n       &lt;td&gt;{{data[field]}}&lt;/td&gt;\n     &lt;/tr&gt;\n    &lt;/tbody&gt;\n   &lt;/table&gt;\n &lt;/script&gt;\n</code></pre>\n\n<p>所以我们可以如下测试这类API：</p>\n\n<pre>\n<code>&lt;position title =&quot;no positioned parent&quot;&gt;&lt;/position&gt;\n\n&lt;div style=&quot;position: relative;padding:50px;&quot;&gt;\n    &lt;position title =&quot;relative parent&quot;&gt;&lt;/position&gt;\n\n     &lt;div style=&quot;position: absolute;top:250px; padding:50px;&quot;&gt;\n         &lt;position title=&quot;relative-&gt;absolute parent&quot;&gt;&lt;/position&gt;\n     &lt;/div&gt;\n &lt;/div&gt;\n\n &lt;div style=&quot;position: absolute;top:0px;left:250px; padding:50px;&quot;&gt;\n         &lt;position title=&quot;absolute parent&quot;&gt;&lt;/position&gt;\n &lt;/div&gt;\n</code></pre>\n\n<p>其效果可以在<a href=\"http://jsbin.com/deximu/edit?html,js,output\">jsbin demo</a>:</p>\n\n<p><img alt=\"$position demo\" src=\"http://greengerong.github.io/images/blog_img/ng-%24position-example.png\" /></p>\n\n<p>同样你也可以在官方的文档中看见对它的测试:&nbsp;<a href=\"https://github.com/angular-ui/bootstrap/blob/master/src/position/test/test.html\">https://github.com/angular-ui/bootstrap/blob/master/src/position/test/test.html</a>。</p>\n\n<p>简单的说：如果我们需要获取某个元素的定位信息，则我们可以用 $position.position(element)；获取相对于固定元素的定位，则可以使用$position.positionElements(hostEl, targetEl, positionStr, appendToBody)。其中positionStr是一个横向和纵向的字符串，如：&rdquo;top-left&rdquo;、&rdquo;bottom-left&rdquo;。其默认值为center。如笔者项目所期望的在某文字段落的左上角显示工具条：</p>\n\n<pre>\n<code>$position.after($toolbar);\nvar elPosition = $position.positionElements($paragraph, $toolbar, &ldquo;top-left&rdquo;);\n$toolbar.css({left: elPosition.left + &#39;px&#39;, top: elPosition.top + &#39;px&#39;});\n</code></pre>\n\n<p>当然也不要忘记为toolbar元素设置position: absolute;</p>\n', '24', '0', '1', '1', '0', '1', '0000-00-00 00:00:00', '1', '2016-05-10 15:20:17');
INSERT INTO `bbs_post` VALUES ('17', '16', '1', '0', 'Android 综合揭秘 —— 全面剖释 Service 服务', '<p><strong>引言</strong></p>\n\n<p>Service 服务是 Android 系统最常用的四大部件之一，Android 支持 Service 服务的原因主要目的有两个，一是简化后台任务的实现，二是实现在同一台设备当中跨进程的远程信息通信。<br />\nService 服务主要分为 Local Service 本地服务与 Remote Service 远程服务两种，本地服务只支持同一进程内的应用程序进行访问，远程服务可通过AIDL（Android Interface Definition Language）技术支持跨进程访问。服务可以通过Context.startService()和Context.bindService()进行启动，一般Local Service本地服务可使用其中一种方法启动，但Remote Service远程服务只能使用Context.bindService()启动，而两种调用方式在使用场景与活动流程中都存在差异。还有通过多线程技术处理 Service 服务的延时操作等技术，下文将针对Android 系统的 Service 服务的一系列操作进行深入探讨。</p>\n\n<p>&nbsp;</p>\n\n<p><a name=\"p0\"></a>&nbsp;</p>\n\n<p><strong>目录</strong></p>\n\n<p><a href=\"http://www.cnblogs.com/leslies2/p/5401813.html#p1\">一、Service 服务的概念与说明</a></p>\n\n<p><a href=\"http://www.cnblogs.com/leslies2/p/5401813.html#p2\">二、Service 服务的生命周期</a></p>\n\n<p><a href=\"http://www.cnblogs.com/leslies2/p/5401813.html#p3\">三、Local Service 的应用原理与开发实例</a></p>\n\n<p><a href=\"http://www.cnblogs.com/leslies2/p/5401813.html#p4\">四、通过多线程方式处理 Service 服务的延时性操作</a></p>\n\n<p><a href=\"http://www.cnblogs.com/leslies2/p/5401813.html#p5\">五、浅谈 Remote Service 远程服务原理</a></p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><a name=\"p1\"></a></p>\n\n<p><strong>一、Android Service的概念与说明</strong></p>\n\n<p><strong>1.1 Service 服务的定义</strong></p>\n\n<p>Android Service 是 Android 平台最常用的部件之一，其概念与 Windows Service 类似，熟悉Windows开发的朋友应该对此概念会有所了解。当 Android 系统需要对现有的程序数据进行监听，或者对现有 Actitvity 提供数据服务支撑时，就会使用到 Android Service 。例如：对用户地理位置的检测，对SD卡定时扫描，对当地气候的定期检测都会使用到 Service 服务，Service 一般都是运行于后台，不需要用户界面支撑。Service 服务不会自动创建线程，如果开发人员没有为Service服务添加异步操作，那Service服务将运行于主线程当中。</p>\n\n<p><strong>1.2 Service 服务的类型</strong></p>\n\n<p><strong>1.2.1 按照 Service 的生命周期模型一共分为两种类型</strong></p>\n\n<p>第一类是直接通过Context.startService()启动，通过Context.stopService() 结束Service，其特点在于调用简单，方便控制。缺点在于一旦启动了 Service 服务，除了再次调用或结束服务外就再无法对服务内部状态进行操控，缺乏灵活性。</p>\n\n<p>第二类是通过Context.bindService()启动，通过Context.unbindService() 结束，相对其特点在运用灵活，可以通过 IBinder 接口中获取 Service 的句柄，对 Service 状态进行检测。</p>\n\n<p>从 Android 系统设计的架构上看，startService() 是用于启动本地服务，bindService() 更多是用于对远程服务进行绑定。当然，也可以结合两者进行混合式应用，先通过startService()启动服务，然后通过 bindService() 、unbindService()方法进行多次绑定，以获取 Service 服务在不同状态下的信息，最后通过stopService()方法结束Service运行，在下面文章里将举例一一说明。</p>\n\n<p><strong>1.2.2 按照 Service 的寄存方式分为两种类型</strong></p>\n\n<p>本地服务 （Local Service） 寄存于当前的进程当中，当前进程结束后 Service 也会随之结束，Service 可以随时与 Activity 等多个部件进行信息交换。Service服务不会自动启动线程，如果没有人工调用多线程方式进行启动，Service将寄存于主线程当中。</p>\n\n<p>远程服务 （Remote Service ） 独立寄存于另一进程中， 通过 AIDL （Android Interface Definition Language）接口定义语言，实现Android设备上的两个进程间通信(IPC)。AIDL 的 IPC 机制是基于 RPC (Remote Proceduce Call) 远程过程调用协议建立的，用于约束两个进程间的通讯规则，供编译器生成代码。进程之间的通信信息，首先会被转换成AIDL协议消息，然后发送给对方，对方收到AIDL协议消息后再转换成相应的对象，其使用方法在下文将会详细说明。</p>\n\n<p><a href=\"http://www.cnblogs.com/leslies2/p/5401813.html#p0\">回到目录</a></p>\n\n<p><a name=\"p2\"></a></p>\n\n<p><strong>二、Android Service 的生命周期</strong></p>\n\n<p><strong>2.1 Service 服务的常用方法</strong></p>\n\n<table border=\"1\">\n	<tbody>\n		<tr>\n			<td><strong>方法　</strong></td>\n			<td><strong>说明</strong></td>\n		</tr>\n		<tr>\n			<td>void onCreate()</td>\n			<td>当Service被启动时被触发，无论使用Context.startServcie还是Context.bindService启动服务，在Service整个生命周期内只会被触发一次</td>\n		</tr>\n		<tr>\n			<td>int onStartCommand(Intent intent, int flags, int startId)</td>\n			<td>当通过Context.startService启动服务时将触发此方法，但当使用 Context.bindService 方法时不会触发此方法，其中参数 intent 是 startCommand 的输入对象，参数 flags 代表 service 的启动方式，参数 startId 当前启动 service 的唯一标式符。返回值决定服务结束后的处理方式，下文将再作详细说明。</td>\n		</tr>\n		<tr>\n			<td>void onStart(Intent intent,int startId)</td>\n			<td>2.0旧版本的方法，已被Android抛弃，不推荐使用，默认在onStartCommand 执行中会调用此方法</td>\n		</tr>\n		<tr>\n			<td>IBinder onBind(Intent intent)</td>\n			<td>使用 Context.bindService 触发服务时将调用此方法，返回一个IBinder 对象，在远程服务时可用于对 Service 对象进行远程操控</td>\n		</tr>\n		<tr>\n			<td>void onRebind(Intent intent)</td>\n			<td>当使用startService启动Service，调用bindService启动Service，且 onUnbind 返回值为 true 时，下次再次调用 Context.bindService 将触发方法</td>\n		</tr>\n		<tr>\n			<td>boolean onUnbind(Intent intent)</td>\n			<td>调用 Context.unbindService 触发此方法，默认返回 false, 当返回值 true 后，再次调用 Context.bindService 时将触发 onRebind 方法</td>\n		</tr>\n		<tr>\n			<td>void onDestory()</td>\n			<td>分三种情况：1.以Context.startService启动service，调用Context.stopService结束时触发此方法;2.以Context.bindService启动service,以Context.unbindService结束时触发此方法;3.先以Context.startService 启动服务，再用Context.bindService绑定服务，结束时必须先调用Context.unbindService解绑再使用Context.stopService结束service才会触发此方法。</td>\n		</tr>\n	</tbody>\n</table>\n\n<p><em>表2.1</em></p>\n\n<ul>\n	<li><strong>细说onStartCommand 方法</strong></li>\n</ul>\n\n<p>由于手机的RAM、内部资源有限，所以很多Service都会因为资源不足而被Kill掉，这时候返回值就决定了Service被Kill后的处理方式，一般 int onStartCommand（intent,flags,startId）的返回值分为以下几种：</p>\n\n<p><strong>START_STICKY</strong><br />\n如果service进程被kill掉，系统会尝试重新创建Service，如果在此期间没有任何启动命令被传递到Service，那么参数intent将为null。</p>\n\n<p><strong>START_NOT_STICKY</strong><br />\n使用这个返回值时，如果在执行完onStartCommand()后，服务被异常kill掉，系统不会自动重启该服务。</p>\n\n<p><strong>START_REDELIVER_INTENT</strong><br />\n使用这个返回值时，如果在执行完onStartCommand()后，服务被异常kill掉，系统会自动重启该服务，并将intent的值传入。</p>\n\n<p><strong>START_STICKY_COMPATIBILITY</strong></p>\n\n<p>START_STICKY的兼容版本，但不保证服务被kill后一定能重启。</p>\n\n<p>而输入参数flags正是代表此次onStartCommand()方法的启动方式，正常启动时，flags默认为0，被kill后重新启动，参数分为以下两种：</p>\n\n<p><strong>START_FLAG_RETRY</strong><br />\n代表service被kill后重新启动，由于上次返回值为START_STICKY，所以参数 intent 为null</p>\n\n<p><strong>START_FLAG_REDELIVERY</strong><br />\n代表service被kill后重新启动，由于上次返回值为START_REDELIVER_INTENT，所以带输入参数intent</p>\n\n<p><strong>2.2 Service 的运作流程</strong></p>\n\n<p>上文曾经提到 Service 的启动方法有Context.startService(intent)，Context.bindService(intent,serviceConnection,int) 两种，下面详细介绍一下它们工作流程。</p>\n\n<p>当系统调用Context.startService()方法时，先会触发Service的onCreate()方法，这一般用于对Service的运行条件作初始化处理，且在Service的生命周期内只会被触发一次。然后系统将触发Service的onStartCommand()方法，用户每次调用startService()方法，都会触发onStartCommand()方法。之后，Service 除非在资源不足的情况下被系统 kill 掉，否则Service不会自动结束，直至系统调用Context.stopService()方法时，Service 才会结束。在Service结束时将自动启动onDestory()方法对运转中的Service作最后处理。</p>\n\n<p><em>注意</em>：<em>即使系统多次调用 startService()或&nbsp; bindService()方法， onCreate() 方法只会在第一次调用时被触发。同理 onDestory () 方法也只会在服务完结时被触发，其原理可看第2.1节该方法的详细说明。</em></p>\n\n<p>当系统调用Context.bindService()方法时，也会触发Service的onCreate()方法对Service对象的运行条件作初始化处理，然后触发Service 的 onBind ()方法对服务进行绑定，成功获取Service的句柄后，系统就会通过用户自定义的serviceConnection对象onServiceConnected(ComponentName name, IBinder service)方法，对 Service 对象作出处理。最后当系统调用Context.unbindService()结束服务时，就会激发Service的onDestory()方法对运转中的 Service 作最后的处理。</p>\n\n<p><em>注意</em>：<em>系统调用 Context.bindService()方法，完成 Service.onBind() 绑定后就会触发 serviceConnection对象的 onServiceConnected()方法，但只要系统未使用 Context.unbindService()方法对 service 服务进行解绑，即使多次调用<em>bindService()，系统也只会在第一次绑定时调用&nbsp;<em>onBind() 和 onServiceConnected方()法一次。这正是 startService()与 bindService()方法其中的区别，单从字面上理解 startService () 启动服务是可以多次执行，所以多次调用 startService()方法都会触发 onStartCommand()事件，而&nbsp;<em><em><em>bindService() 是</em></em></em>绑定服务，所以只要服务已经被绑定，在未解绑时也不会多次执行onServiceConnected()绑定后的操作，这也是两者在使用场景上的区别所在。</em></em></em></p>\n\n<p><img alt=\"\" src=\"http://images2015.cnblogs.com/blog/64989/201604/64989-20160418000339551-1085012062.gif\" style=\"height:528px; width:547px\" /></p>\n\n<p><em>Service 生命周期&nbsp;&nbsp; 图2.2</em></p>\n\n<p>Service 的运转流程就先介绍到这里，具体的使用方法将在下面的章节中详细介绍。</p>\n\n<p><a href=\"http://www.cnblogs.com/leslies2/p/5401813.html#p0\">回到目录</a></p>\n\n<p><a name=\"p3\"></a></p>\n\n<p><strong>三、Local Service 应用原理与开发实例</strong></p>\n\n<p><strong>3.1 通过 Context.startService 启动 Service 服务</strong></p>\n\n<p>首先建立MyService继承Service，实现onCreate()、onDestory()、onStartCommand()、onStart()等几个方法，使用日志记录其运作信息。在Activity中通过Intent绑定Service服务,通过Context.startService()启动服务，通过Context.stopService()结束服务。</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n 1 public class MainActivity extends Activity {\n 2 \n 3     @Override\n 4     protected void onCreate(Bundle savedInstanceState) {\n 5         super.onCreate(savedInstanceState);\n 6         setContentView(R.layout.activity_main);\n 7     }\n 8     \n 9     public void btnStart_onclick(View view){    \n10         //通过Intent绑定MyService,加入输入参数    \n11         Intent intent=new Intent(MainActivity.this,MyService.class);\n12         intent.putExtra(&quot;Name&quot;, &quot;Leslie&quot;);\n13         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick startService-----------&quot;);\n14         //启动MyService\n15         startService(intent);\n16     }\n17     \n18     public void btnStop_onclick(View view){\n19         Intent intent=new Intent(MainActivity.this,MyService.class);\n20         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick stopService------------&quot;);\n21         //停止MyService\n22         stopService(intent);\n23     }\n24 }\n25 \n26 public class MyService extends Service{\n27 \n28     @Override\n29     public void onCreate(){\n30         Log.i(Context.ACTIVITY_SERVICE,&quot;Service onCreate&quot;);\n31         super.onCreate();\n33     }\n34     \n35     @Override\n36     public void onDestroy() {\n37         Log.i(Context.ACTIVITY_SERVICE, &quot;Service onDestroy&quot;);\n38         super.onDestroy();\n39     }\n40     \n41     @Override\n42     public void onStart(Intent intent, int startId){\n43         Log.i(Context.ACTIVITY_SERVICE,&quot;Service onStart&quot;);\n44         super.onStart(intent, startId);\n45     }\n46     \n47     @Override\n48     public int onStartCommand(Intent intent, int flags, int startId) {\n49         Log.i(Context.ACTIVITY_SERVICE, &quot;Service onStartCommand&quot;);\n50         String name=intent.getStringExtra(&quot;Name&quot;);\n51         Log.i(Context.ACTIVITY_SERVICE,&quot;His name is &quot;+name);\n52         return super.onStartCommand(intent, flags, startId);\n53     }\n54 }</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>AndroidManifest.xml 文件绑定</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n 1         &lt;activity\n 2             android:name=&quot;.MainActivity&quot;\n 3             android:label=&quot;@string/title_activity_main&quot; &gt;\n 4             &lt;intent-filter&gt;\n 5                 &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n 6                 &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n 7             &lt;/intent-filter&gt;\n 8         &lt;/activity&gt;\n 9         &lt;service\n10             android:name=&quot;android.services.MyService&quot;\n11             android:enabled=&quot;true&quot;&gt;\n12         &lt;/service&gt;</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>Service 配置说明：</p>\n\n<ul>\n	<li>android:name　&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 服务类名，注意如果Service与Activity不在同一个包中，在android:name上必须写上Service的全路径</li>\n	<li>android:label　　&nbsp;&nbsp;&nbsp; 服务的名字，如果为空，默认显示的服务名为类名</li>\n	<li>android:icon　　&nbsp;&nbsp;&nbsp;&nbsp; 服务的图标</li>\n	<li>android:permission 申明此服务的权限，这意味着只有提供了该权限的应用才能控制或连接此服务</li>\n	<li>android:process　&nbsp;&nbsp; 表示该服务是否运行在另外一个进程，如果设置了此项，那么将会在包名后面加上这段字符串表示另一进程的名字</li>\n	<li>android:enabled　&nbsp; 如果此项设置为 true，那么 Service 将会默认被系统启动，默认值为 false</li>\n	<li>android:exported　表示该服务是否能够被其他应用程序所控制或连接，默认值为 false</li>\n</ul>\n\n<p>查看处理结果可清楚看到，多次调用startService()后，使用stopService()结束Service服务,onCreate()、onDestory()只会在Service启动和结束时被调用一次。只有Service中的onStartCommand()方法会被多次调用。而Android 2.0以下旧版的方法onStart()会在onStartCommand()调用过程中被激发。</p>\n\n<p><img alt=\"\" src=\"http://images2015.cnblogs.com/blog/64989/201604/64989-20160418213126116-246602038.jpg\" style=\"height:274px; width:704px\" /></p>\n\n<p>&nbsp;</p>\n\n<p><strong>3.2 通过Context.bindService启动Service服务</strong></p>\n\n<p>在介绍Context.bindService()前，先讲解一下与此相关的常用类 Binder、ServiceConnection，首先 IBinder 是 Binder 远程对象的基本接口，是为高性能而设计的轻量级远程调用机制的核心部分。这个接口定义了与远程对象交互的协议，但它不仅用于远程调用，也用于进程内调用。系统可以通过它以获取Service的句柄，在此先简单介绍它的基本用法，在下面关于Remote Service远程服务对象时再详细讲述IBinder的主体功能。ServiceConnection主要用于通过Binder绑定Service句柄后，对Service对象进行处理,它主要有两个方法void onServiceConnected(ComponentName name, IBinder service)和void onServiceDisconnected(ComponentName name)。在Context.bindService()完成绑定后，系统就会调用 onServiceConnected() 方法，用户可以通过 IBinder 参数获取Service句柄，对Service进行处理。而&nbsp;onServiceDisconnected()&nbsp;方法一般不会被调用，只有Service被绑定后，由于内存不足等问题被意外 kill 时才会被调用。下面举个例子说明一下bindService()的用法。</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n 1 public class MainActivity extends Activity {\n 2     private MyServiceConnection serviceConnection;\n 3     \n 4     @Override\n 5     protected void onCreate(Bundle savedInstanceState) {\n 6         super.onCreate(savedInstanceState);\n 7         setContentView(R.layout.activity_main);\n 8         \n 9         serviceConnection=new MyServiceConnection();\n10     }\n11     \n12     public void btnBind_onclick(View view){\n13         //绑定 MyService        \n14         Intent intent=new Intent(this,MyService.class);\n15 \n16         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick bindService-----------&quot;);\n17         //通过bindService（intent,serviceConnection,int）方式启动Service\n18         bindService(intent,this.serviceConnection,Context.BIND_AUTO_CREATE);\n19     }\n20     \n21     public void btnUnbind_onclick(View view){\n22         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick unbindService----------&quot;);\n23         unbindService(serviceConnection);\n24     }\n25 }\n26 \n27 public class MyService extends Service{\n28     private MyBinder myBinder;\n29 \n30     @Override\n31     public IBinder onBind(Intent intent) {\n32         Log.i(Context.ACTIVITY_SERVICE,&quot;Service onBind&quot;);\n33         return this.myBinder;\n34     }\n35     \n36     @Override\n37     public boolean onUnbind(Intent intent){\n38         Log.i(Context.ACTIVITY_SERVICE,&quot;Service onUnbind&quot;);\n39         return super.onUnbind(intent);\n40     }\n41     \n42     @Override\n43     public void onCreate(){\n44         super.onCreate();\n45         Log.i(Context.ACTIVITY_SERVICE,&quot;Service onCreate&quot;);\n46         myBinder=new MyBinder();\n47     }\n48     \n49     @Override\n50     public void onDestroy() {\n51         Log.i(Context.ACTIVITY_SERVICE, &quot;Service onDestroy&quot;);\n52         super.onDestroy();\n53     }\n54     \n55     public String getDate(){\n56         Calendar calendar = Calendar.getInstance();\n57         return calendar.getTime().toString();\n58     }\n59     \n60     public class MyBinder extends Binder {\n61         public MyService getService(){\n62             return MyService.this;\n63         }      \n64     }\n65 }\n66 \n67 public class MyServiceConnection implements ServiceConnection{\n68  \n69     @Override\n70     public void onServiceConnected(ComponentName name, IBinder service){\n71         Log.i(Context.ACTIVITY_SERVICE, &quot;Service Connected&quot;);\n72         String data=null;\n73         //通过IBinder获取Service句柄 \n74         MyService.MyBinder myBinder=(MyService.MyBinder)service;    \n75         MyService myService=myBinder.getService();\n76         data=myService.getDate();\n77         \n78         Log.i(Context.ACTIVITY_SERVICE,data);\n79     }\n80     \n81     @Override\n82     public void onServiceDisconnected(ComponentName name) {\n83         Log.i(Context.ACTIVITY_SERVICE, &quot;Service Disconnected&quot;);\n84     }\n85 }</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>在运行时多次点击按钮激发btnBind_onclick(View view)方法后再使用btnUnbind_onclick(View view)结束服务，请留意处理结果。当系统调用Context .bindService()后，Service将跟随onCreate()、onBind()、onUnbind()、onDestory()的流程走下去。在成功完成onBind()绑定后，就会激发ServiceConnection对象的onServiceConnected()方法，在此用户可对Service进行处理。记得第2.2节所提过的问题，即使多次调用Context.bindService()方法，只要没有调用unbindService()结束绑定，系统只会在第一次调用时激发Service.onBind()和onServiceConnected()方法，这点从运行结果中可得到证实。</p>\n\n<p><img alt=\"\" src=\"http://images2015.cnblogs.com/blog/64989/201604/64989-20160419003530554-1089622361.jpg\" style=\"height:220px; width:714px\" /></p>\n\n<p><em>注意：调用 Context .bindService() 启动 Service 后 ,只能调用 unbindService() 一次，如重复多次调用此方法系统将会抛出错误异常。所以最简单的处理方式是设置一个静态变量 boolean connected，在调用 unbindService() 前先作出判断</em></p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n 1 public class MainActivity extends Activity {\n 2     private MyServiceConnection serviceConnection;\n 3     private static boolean connected;\n 4 \n 5     @Override\n 6     protected void onCreate(Bundle savedInstanceState) {\n 7         super.onCreate(savedInstanceState);\n 8         setContentView(R.layout.activity_main);\n 9         \n10         serviceConnection=new MyServiceConnection();\n11     }\n12     \n13     public void btnBind_onclick(View view){\n14         connected=true;\n15         //绑定 MyService        \n16         Intent intent=new Intent(this,MyService.class);\n17 \n18         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick bindService-----------&quot;);\n19         //通过bindService（intent,serviceConnection,int）方式启动Service\n20         bindService(intent,this.serviceConnection,Context.BIND_AUTO_CREATE);\n21     }\n22     \n23     public void btnUnbind_onclick(View view){\n24         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick unbindService----------&quot;);\n25         if(connected){\n26             unbindService(serviceConnection);\n27             connected=false;\n28         }\n29     }\n30 }</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>&nbsp;</p>\n\n<p><strong>3.3 Service 服务的综合运用</strong></p>\n\n<p>在前两节只是从初级阶段介绍了Service服务的使用原理，无论是使用startService()或者bindService()启动服务，Service服务的运行都是阶段性，当使用stopService()、unbindService()后，Service服务就会结束。然而从现实应用层面上看，Service 服务很多时候是长驻后台的，它会记录程序运行的流程，当今的状态等重要信息。此时，更多的使用方式就是结合startService()、bindService()两种方式调用Service服务，startService()负责管理Service服务的启动，输入初始化参数，bindService()负责定时对Service服务进行检测。而且流程是有规律性，以startService()启动服务后，每使用bindService()绑定服务，就通过serviceConnection对服务进行检测，然后以unbindService()结束绑定。注意，此时服务并未结束，而是长期运行于后台，直到系统以stopService()方法结束服务后，Service才会最终完结。</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n  1 public class MainActivity extends Activity {\n  2     private MyServiceConnection serviceConnection;\n  3     \n  4     @Override\n  5     protected void onCreate(Bundle savedInstanceState) {\n  6         super.onCreate(savedInstanceState);\n  7         setContentView(R.layout.activity_main);\n  8         \n  9         serviceConnection=new MyServiceConnection();\n 10     }\n 11     \n 12     public void btnBind_onclick(View view){\n 13         //绑定 MyService        \n 14         Intent intent=new Intent(this,MyService.class);\n 15 \n 16         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick bindService-----------&quot;);\n 17         //通过bindService（intent,serviceConnection,int）方式启动Service\n 18         bindService(intent,this.serviceConnection,Context.BIND_AUTO_CREATE);\n 19     }\n 20     \n 21     public void btnUnbind_onclick(View view){\n 22         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick unbindService----------&quot;);\n 23         unbindService(serviceConnection);\n 24     }\n 25     \n 26     public void btnStart_onclick(View view){    \n 27         //通过Intent绑定MyService,加入初始参数    \n 28         Intent intent=new Intent(MainActivity.this,MyService.class);\n 29         intent.putExtra(&quot;param&quot;,0.88);\n 30         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick startService-----------&quot;);\n 31         //启动MyService\n 32         startService(intent);\n 33     }\n 34     \n 35     public void btnStop_onclick(View view){\n 36         Intent intent=new Intent(MainActivity.this,MyService.class);\n 37         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick stopService------------&quot;);\n 38         //停止MyService\n 39         stopService(intent);\n 40     }\n 41 }\n 42 \n 43 public class MyService extends Service{\n 44     private MyBinder myBinder;\n 45     private double param;\n 46 \n 47     @Override\n 48     public void onStart(Intent intent, int startId){\n 49         Log.i(Context.ACTIVITY_SERVICE,&quot;Service onStart&quot;);\n 50         super.onStart(intent, startId);\n 51     }\n 52     \n 53     @Override\n 54     public int onStartCommand(Intent intent, int flags, int startId) {\n 55         Log.i(Context.ACTIVITY_SERVICE, &quot;Service onStartCommand&quot;);\n 56         //获取Context.startService设置的param初始值\n 57         this.param=intent.getDoubleExtra(&quot;param&quot;,1.0);\n 58         return super.onStartCommand(intent, flags, startId);\n 59     }\n 60 \n 61     @Override\n 62     public IBinder onBind(Intent intent) {\n 63         Log.i(Context.ACTIVITY_SERVICE,&quot;Service onBind&quot;);\n 64         return this.myBinder;\n 65     }\n 66     \n 67     @Override\n 68     public boolean onUnbind(Intent intent){\n 69         Log.i(Context.ACTIVITY_SERVICE,&quot;Service onUnbind&quot;);\n 70         return super.onUnbind(intent);\n 71     }\n 72     \n 73     @Override\n 74     public void onCreate(){\n 75         super.onCreate();\n 76         Log.i(Context.ACTIVITY_SERVICE,&quot;Service onCreate&quot;);\n 77         myBinder=new MyBinder();\n 78     }\n 79     \n 80     @Override\n 81     public void onDestroy() {\n 82         Log.i(Context.ACTIVITY_SERVICE, &quot;Service onDestroy&quot;);\n 83         super.onDestroy();\n 84     }\n 85     \n 86     //获取处理后的值\n 87     public double getValue(int value){\n 88         return value*param;\n 89     }\n 90     \n 91     public class MyBinder extends Binder {\n 92         public MyService getService(){\n 93             return MyService.this;\n 94         }      \n 95     }\n 96 }\n 97 \n 98 public class MyServiceConnection implements ServiceConnection{\n 99  \n100     @Override\n101     public void onServiceConnected(ComponentName name, IBinder service){\n102         Log.i(Context.ACTIVITY_SERVICE, &quot;Service Connected&quot;);\n103         //通过IBinder获取Service句柄 \n104         MyService.MyBinder myBinder=(MyService.MyBinder)service;    \n105         MyService myService=myBinder.getService();\n106         //生成随机数输入\n107         Random random=new Random();\n108         double value=myService.getValue(random.nextInt(10)*1000);\n109         //显示计算结果\n110         Log.i(Context.ACTIVITY_SERVICE,String.valueOf(value));\n111     }\n112     \n113     @Override\n114     public void onServiceDisconnected(ComponentName name) {\n115         Log.i(Context.ACTIVITY_SERVICE, &quot;Service Disconnected&quot;);\n116     }\n117 }</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>通过startService() 启动服务后，多次使用bindService()绑定服务，unbindService()解除绑定,最后通过stopService()结束服务后，可以看到下面的结果<br />\n这时候 Service 的onBind()方法和onUnbind()方法只在第一个bindService流程中触发，其后多次调用bindService(),此事件都不会被触发，而只会触发onServiceConnected()事件。这是因为在默认情况下，系统在绑定时会先搜索IBinder接口，如果Service已经绑定了Binder对象，系统就会直接跳过onBind()方法。</p>\n\n<p>&nbsp;<img alt=\"\" src=\"http://images2015.cnblogs.com/blog/64989/201604/64989-20160419184851757-975938202.jpg\" style=\"height:363px; width:726px\" /></p>\n\n<p>既然 onBind(),onUnbind()方法只会在第一次启动绑定时被调用，如果在多次绑定时需要有不同的处理方式又该如何，还好Android为大家预备了一个备用方法void onRebind(intent)，Service服务中 boolean onUnbind(intent)的默认返回值为false,只要将此方法的返回值修改为true,则系统在第二次调用Context.bindService()开始，就会激活Service.onRebind（intent）方法。在此对上面的方法作出少量修改，就会看到下面的处理结果。</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n 1 public class MyService extends Service{\n 2     ...........\n 3     @Override\n 4     public void onRebind(Intent intent){\n 5         Log.i(Context.ACTIVITY_SERVICE,&quot;Service onRebind&quot;);\n 6         super.onRebind(intent);\n 7     }\n 8     \n 9     @Override\n10     public boolean onUnbind(Intent intent){\n11         Log.i(Context.ACTIVITY_SERVICE,&quot;Service onUnbind&quot;);\n12         //将返回值设置为true\n13         return true;\n14     }\n15     ...........\n16     ...........\n17 }</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>运行结果</p>\n\n<p><img alt=\"\" src=\"http://images2015.cnblogs.com/blog/64989/201604/64989-20160419192637273-2096755403.jpg\" style=\"height:452px; width:749px\" /></p>\n\n<p><em>注意：此使用方法只适用 startService()、bindServcie()同时被调用的情况下，如果只调用其中一个方法，无论onUnbind()返回值为何值都无法触发onRebind()方法</em></p>\n\n<p><a href=\"http://www.cnblogs.com/leslies2/p/5401813.html#p0\">回到目录</a></p>\n\n<p><a name=\"p4\"></a></p>\n\n<p><strong>四、通过多线程方式处理 Service 的延时性操作</strong>&nbsp;</p>\n\n<p><strong>4.1 以 Runnable接口实现 Service 多线程操作</strong></p>\n\n<p>由于Android 系统的资源有限，而且对屏幕显示，事件发应，用户体现都有较高的要求，所以在CPU、RAM、GPU、GPU都有独立的运行机制。当主线程中存在大文件读取、图片批量处理、网络连接超时等操作时，一旦时间超过5秒，Android 系统就会出现 &ldquo;设置运行缓慢&rdquo; 的提示，Logcat日志上也会显示 &ldquo;The application may be doing too much work on its main thread&rdquo; 等提示。在开发Service服务时，若存在此类操作时，开发人员就应该尝试使用多线程方式进行开发，避免主线程被长时间占用。下文将以简单的 Runnable 接口方式实现多线程作为例子。</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n 1 public class MainActivity extends Activity {\n 2     \n 3     @Override\n 4     protected void onCreate(Bundle savedInstanceState) {\n 5         super.onCreate(savedInstanceState);\n 6         setContentView(R.layout.activity_main);\n 7     }\n 8     \n 9     public void btnStart_onclick(View view){        \n10         Intent intent=new Intent(MainActivity.this,MyService.class);\n11         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick startService-----------------&quot;);\n12         startService(intent);\n13     }\n14     \n15     public void btnStop_onclick(View view){\n16         Intent intent=new Intent(MainActivity.this,MyService.class);\n17         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick stopService------------------&quot;);\n18         stopService(intent);\n19     }\n20 }\n21 \n22 public class MyService extends Service{\n23     \n24     @Override\n25     public void onCreate(){\n26         Log.i(Context.ACTIVITY_SERVICE,&quot;Service onCreate&quot;);\n27         super.onCreate();\n28     }\n29 \n30     @Override\n31     public int onStartCommand(Intent intent, int flags, int startId) {\n32         Log.i(Context.ACTIVITY_SERVICE, &quot;Service onStartCommand&quot;);\n33         Log.i(Context.ACTIVITY_SERVICE,&quot;Main thread id is &quot;+Thread.currentThread().getId());\n34         //以异步方式进行模拟操作\n35         Thread background=new Thread(new AsyncRunnable());\n36         background.start();\n37         return super.onStartCommand(intent, flags, startId);\n38     }\n39     \n40     @Override\n41     public void onDestroy() {\n42         Log.i(Context.ACTIVITY_SERVICE, &quot;Service onDestroy&quot;);\n43         super.onDestroy();\n44     }\n45 }\n46 \n47 public class AsyncRunnable implements Runnable {\n48 \n49     @Override\n50     public void run() {\n51         try {\n52             Log.i(Context.ACTIVITY_SERVICE,&quot;Async thread id is &quot;+Thread.currentThread().getId());\n53             //虚拟操作\n54             for(int n=0;n&lt;8;n++){\n55                Thread.sleep(1000);\n56                Log.i(Context.ACTIVITY_SERVICE,&quot;****Do Work****&quot;);\n57             }\n58         } catch (InterruptedException e) {\n59             // TODO 自动生成的 catch 块\n60             e.printStackTrace();\n61         }\n62     }\n63 }</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>请留意运行结果，主线程与onStartCommand()方法内部操作存在于不同的线程当中完成</p>\n\n<p><img alt=\"\" src=\"http://images2015.cnblogs.com/blog/64989/201604/64989-20160420022800898-799449573.png\" style=\"height:310px; width:757px\" /></p>\n\n<p>&nbsp;</p>\n\n<p><strong>4.2 IntentService 服务简介</strong></p>\n\n<p>在Service服务中出现延时性操作是普遍遇到的情况，有见及此 Android 系统早为开发人员提供了一个Service的子类IntentService，当IntentService执行 startService()方法时，系统将使用一个循环程序将该服务加入到一个子线程队列当中，以便执行服务当中的操作。下面为大家提供 IntentService的源代码，让各位更好的理解IntentService的运行方式。</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n 1 public abstract class IntentService extends Service {\n 2     private volatile Looper mServiceLooper;\n 3     private volatile ServiceHandler mServiceHandler;\n 4     private String mName;\n 5     private boolean mRedelivery;\n 6 \n 7     private final class ServiceHandler extends Handler {\n 8         public ServiceHandler(Looper looper) {\n 9             super(looper);\n10         }\n11 \n12         @Override\n13         public void handleMessage(Message msg) {\n14             onHandleIntent((Intent)msg.obj);\n15             stopSelf(msg.arg1);\n16         }\n17     }\n18 \n19     public IntentService(String name) {\n20         super();\n21         mName = name;\n22     }\n23 \n24     public void setIntentRedelivery(boolean enabled) {\n25         mRedelivery = enabled;\n26     }\n27 \n28     @Override\n29     public void onCreate() {\n30         super.onCreate();\n31         HandlerThread thread = new HandlerThread(&quot;IntentService[&quot; + mName + &quot;]&quot;);\n32         thread.start();\n33 \n34         mServiceLooper = thread.getLooper();\n35         mServiceHandler = new ServiceHandler(mServiceLooper);\n36     }\n37 \n38     @Override\n39     public void onStart(Intent intent, int startId) {\n40         Message msg = mServiceHandler.obtainMessage();\n41         msg.arg1 = startId;\n42         msg.obj = intent;\n43         mServiceHandler.sendMessage(msg);\n44     }\n45 \n46     @Override\n47     public int onStartCommand(Intent intent, int flags, int startId) {\n48         onStart(intent, startId);\n49         return mRedelivery ? START_REDELIVER_INTENT : START_NOT_STICKY;\n50     }\n51 \n52     @Override\n53     public void onDestroy() {\n54         mServiceLooper.quit();\n55     }\n56 \n57     @Override\n58     public IBinder onBind(Intent intent) {\n59         return null;\n60     }\n61 \n62     protected abstract void onHandleIntent(Intent intent);\n63 }</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>从代码中可以看到，系统没有在onStartCommand()中创建新线程，而是在onCreate()方法中建立了独立的工作线程，这是由于onCreate()方法只会在新建服务时被调用一次，可见这样的目的是为了让系统在单个线程中执行多个异步任务。当系统调用Context.startService()方法时，系统将通过onStart()方法使用异步方式，调用ServiceHandler.handleMessage（msg）进行处理，而handleMessage(msg)正是调用了虚拟方法onHandleIntent(intent),然后以stopSelf()结束服务。所以用户只需要在继承类中重写onHandleIntent（intent）方法，便可以以异步方法执行IntentService。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>4.3 IntentService 应用</strong></p>\n\n<p>以下面一个简单的例子说明一下IntentService的应用，建立一个MyIntentService类继承IntentService，实现onHandleIntent(Message msg)方法。然后在MainActivity活动分别3次以不同参数调用intentService,观察其运行的线程状态。</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n 1 public class MyIntentService extends IntentService {\n 2     \n 3     public MyIntentService() {\n 4         super(null);\n 5     }\n 6 \n 7     @Override\n 8     protected void onHandleIntent(Intent intent) {\n 9         String msg=intent.getStringExtra(&quot;msg&quot;);\n10         Log.i(Context.ACTIVITY_SERVICE,msg+&quot;&#39;s thread id is &quot;+Thread.currentThread().getId());\n11     }\n12 }\n13 \n14 public class MainActivity extends Activity {\n15 \n16     @Override\n17     protected void onCreate(Bundle savedInstanceState) {\n18         super.onCreate(savedInstanceState);\n19         setContentView(R.layout.activity_main);\n20     }\n21     \n22     public void btnStart_onclick(View view){    \n23         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick startService--------------&quot;);\n24         Log.i(Context.ACTIVITY_SERVICE,&quot;Main thread id is &quot;+Thread.currentThread().getId());\n25         \n26         Intent intent1=new Intent(this,MyIntentService.class);\n27         intent1.putExtra(&quot;msg&quot;, &quot;intentService1&quot;);\n28         startService(intent1);\n29         \n30         Intent intent2=new Intent(this,MyIntentService.class);\n31         intent2.putExtra(&quot;msg&quot;, &quot;intentService2&quot;);\n32         startService(intent2);\n33         \n34         Intent intent3=new Intent(this,MyIntentService.class);\n35         intent3.putExtra(&quot;msg&quot;, &quot;intentService3&quot;);\n36         startService(intent3);\n37     }\n38     \n39     public void btnStop_onclick(View view){\n40         Intent intent=new Intent(MainActivity.this,MyIntentService.class);\n41         Log.i(Context.ACTIVITY_SERVICE, &quot;----------onClick stopService-------------&quot;);\n42         stopService(intent);\n43     }\n44 }</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>在AndroidManifest.xml 文件设置服务</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n1    &lt;application&gt;\n2         ..........\n3         &lt;service\n4             android:name=&quot;android.services.MyIntentService&quot;\n5             android:enabled=&quot;true&quot;&gt;\n6         &lt;/service&gt;\n7     &lt;/application&gt;</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>从运行结果中可以看出，同一时间多次启动startService()调用intentService，它们都将运行于同一个异步线程当中，这一点在这里得到了证实。</p>\n\n<p><img alt=\"\" src=\"http://images2015.cnblogs.com/blog/64989/201605/64989-20160508034426173-203454177.jpg\" style=\"height:152px; width:776px\" /></p>\n\n<p><a href=\"http://www.cnblogs.com/leslies2/p/5401813.html#p0\">回到目录</a></p>\n\n<p>&nbsp;<a name=\"p5\"></a></p>\n\n<p><strong>五、浅谈 Remote Service 原理</strong></p>\n\n<p><strong>5.1 跨进程通信的使用场景</strong></p>\n\n<p>以上章节所举的例子都是使用Local Service 技术，Serivce服务端与Client客户端都是在于同一进程当中，当APP被卸御，Service服务也被同时卸御。要是想把服务端与客户端分别放在不同的进程当中进行跨进程信息交换的话，就需要使用到下面介绍的远程通信服务 Remote Service。使用Remote Service可以把服务端与客户端分离，当一方被卸御，另一方不会被影响。当今有很多企业都有多个独立的APP，如阿里巴巴旗下就天猫、淘宝、聚划算、支付宝等多个APP，这时候就有需要把Service服务放在一独立的后台进程当中，作为多个APP之间信息交换的桥梁。这样如用户信息，用户登录，身份验证等多个共用的模块都可以在Service服务中实现，以供不同的APP进行调用。而且当APP被关闭时，Service服务还会寄存在后台当中，对用户的操作进行检测。如今越来越多的企业都使用这种开发方式，以收集用户像所在地点，通信录，短信，彩信等个人信息，方便企业针对用户的个人资料进行产品推广。</p>\n\n<p><strong>5.2 Remote Service 技术背景</strong></p>\n\n<p>Android 系统与 Windows 系统的通信原则基本一致，进程就是安全策略的边界，不同的APP属于不同进程 Process，一个进程不能直接访问其他进程的资源。需要实现多进程间的通信，就要使用IPC（Inter Process Commnication）进程间通信技术。Android 系统的 IPC 机制是基于 RPC (Remote Proceduce Call) 远程过程调用协议建立的，与 Java 使用的 RMI（Rmote Methed Invocation）远程方法调用相比，不同之处在于Android的IPC机制是基于AIDL（Android Interface Definition Language）接口定义语言定制进程间的通讯规则的。系统会基于 AIDL 规则把信息进行序列化处理，然后发送到另一个进程当中，Android 系统把这种基于跨进程通信的服务称作&nbsp;Remote Service 。</p>\n\n<p><strong>5.3 IPC 运作原理</strong></p>\n\n<p>从底层架构分析， Android 系统中 IPC 的运作主要依赖于 &ldquo;ServiceManager&rdquo; 和 &ldquo;Binder Driver&rdquo; 两个核心元件，下面给大家简单介绍一下它们的运作原理：</p>\n\n<ul>\n	<li><strong>ServiceManager 简介</strong></li>\n</ul>\n\n<p>ServiceManager是Android系统内的服务管理器，主要负责管理 Service 服务的管理，注册，调用等任务。在Google提供的Android原始代码中可以找到（文件夹路径：frameworks/base/cmds/servicemanager），有C语言开发基础且有兴趣的朋友可以下载看一下，当中包含了几个核心的函数：</p>\n\n<p>int svcmgr_handler(struct binder_state *bs, struct binder_txn *txn, struct binder_io *msg, struct binder_io *reply)<br />\nint do_add_service(struct binder_state *bs, uint16_t *s, unsigned len, void *ptr, unsigned uid)<br />\nvoid *do_find_service(struct binder_state *bs, uint16_t *s, unsigned len)<br />\nvoid&nbsp;binder_loop(struct&nbsp;binder_state&nbsp;*bs,&nbsp;binder_handler&nbsp;func)</p>\n\n<p>ServiceManager 启动后会通过 binder_loop 循环对 Binder Driver 进行监听，当发现了有新的Service服务请求后，就会调用 svcmgr_handler() 函数对检测的Service服务进行处理，通过*do_find_service()函数可以在svclist集中检测Service服务，若当前svclist服务集中未存在当前服务，就会通过do_add_service()进行注册，把当前服务及其唯一标识符加入到svclist中，这样当前的 Service 服务被绑定后就完成在ServiceManager的注册。Binder Driver 会按照规定的格式把它转化为 Binder 实体发送到内核当中，当被 Client 调用时 ServiceManager 会根据 Service 服务的标识符在 svclist 中找到该 Binder 实体，并把 Binder 实体的引用发送给Client。完成计算后 Binder Driver 会进行数据处理，把计算结果发回到Client客户端。由于Binder实体是以强类型的形式存在，所以即使被多次引用，系统都会指向同一个Binder实体，除非所有都结束链接，否则Binder实体会一直存在。</p>\n\n<p><img alt=\"\" src=\"http://images2015.cnblogs.com/blog/64989/201604/64989-20160421155658960-1951825642.gif\" style=\"height:273px; width:305px\" /></p>\n\n<p><em>图 5.3</em></p>\n\n<ul>\n	<li><strong>Binder Driver简介</strong></li>\n</ul>\n\n<p>Binder Driver运行于Android&nbsp;内核当中，它以 &ldquo;字符驱动设备&rdquo; 中的 &ldquo;misc设备注册&rdquo; 存在于设备目录 dev/binder，由于权限问题，在一般手机中没有权限进行复制，对此有兴趣的朋友可以在google 提供的 android 源代码中查看。它提供open()，mmap()，poll()，ioctl() 等函数进行标准化文件操作，负责进程之间Binder通信的建立，Binder实体在进程之间的传递，Binder实体引用的计数管理，数据包在进程之间的传递与交互等一系列底层操作。</p>\n\n<p><strong>5.4 Remote Service 常用接口</strong></p>\n\n<p>在 5.3 节以 Android 底层结构的方式简单介绍了一下 IPC 通信的原理，下面将以 JAVA 应用层方式再作介绍。</p>\n\n<ul>\n	<li><strong>IBinder 接口</strong></li>\n</ul>\n\n<p>IBinder 是 Remote Service 远程服务的常用接口，Binder是它的实现类，它是为高性能而设计的轻量级远程调用机制的核心部分。IBinder 内部比较重要的方法就是&nbsp;boolean transact(int code, Parcel data, Parcel reply, int flags) ，它负责在服务器与客户端之间进行信息交换，调用远程方法进行处理，然后把返回值转换成可序列化对象送回客户端。</p>\n\n<p><strong>5.5 Remote Service 开发实例</strong></p>\n\n<p>首先新建一个项目作为服务端, 建立 AIDL 文件 ITimerService.aidl，系统会根据接口描述自动在gen文件夹内生成对应的类文件 ITimerService.java ，当中 Stub 扩展了 android.os.Binder 并利用 transact ()实现了 ITimerService 接口中方法的远程调用。</p>\n\n<pre>\n1 package com.example.remoteservice;\n2 \n3 interface ITimerService{\n4     String getTimeNow();\n5 }</pre>\n\n<p>gen\\com\\example\\remoteservice\\ITimerService.java （自动生成）</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n 1 package com.example.remoteservice;\n 2 public interface ITimerService extends android.os.IInterface\n 3 {\n 4 /** Local-side IPC implementation stub class. */\n 5 public static abstract class Stub extends android.os.Binder implements com.example.remoteservice.ITimerService\n 6 {\n 7 private static final java.lang.String DESCRIPTOR = &quot;com.example.remoteservice.ITimerService&quot;;\n 8 /** Construct the stub at attach it to the interface. */\n 9 public Stub()\n10 {\n11 this.attachInterface(this, DESCRIPTOR);\n12 }\n13 /**\n14  * Cast an IBinder object into an com.example.remoteservice.ITimerService interface,\n15  * generating a proxy if needed.\n16  */\n17 public static com.example.remoteservice.ITimerService asInterface(android.os.IBinder obj)\n18 {\n19 if ((obj==null)) {\n20 return null;\n21 }\n22 android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n23 if (((iin!=null)&amp;&amp;(iin instanceof com.example.remoteservice.ITimerService))) {\n24 return ((com.example.remoteservice.ITimerService)iin);\n25 }\n26 return new com.example.remoteservice.ITimerService.Stub.Proxy(obj);\n27 }\n28 @Override public android.os.IBinder asBinder()\n29 {\n30 return this;\n31 }\n32 @Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException\n33 {\n34 switch (code)\n35 {\n36 case INTERFACE_TRANSACTION:\n37 {\n38 reply.writeString(DESCRIPTOR);\n39 return true;\n40 }\n41 case TRANSACTION_getTimeNow:\n42 {\n43 data.enforceInterface(DESCRIPTOR);\n44 java.lang.String _result = this.getTimeNow();\n45 reply.writeNoException();\n46 reply.writeString(_result);\n47 return true;\n48 }\n49 }\n50 return super.onTransact(code, data, reply, flags);\n51 }\n52 private static class Proxy implements com.example.remoteservice.ITimerService\n53 {\n54 private android.os.IBinder mRemote;\n55 Proxy(android.os.IBinder remote)\n56 {\n57 mRemote = remote;\n58 }\n59 @Override public android.os.IBinder asBinder()\n60 {\n61 return mRemote;\n62 }\n63 public java.lang.String getInterfaceDescriptor()\n64 {\n65 return DESCRIPTOR;\n66 }\n67 @Override public java.lang.String getTimeNow() throws android.os.RemoteException\n68 {\n69 android.os.Parcel _data = android.os.Parcel.obtain();\n70 android.os.Parcel _reply = android.os.Parcel.obtain();\n71 java.lang.String _result;\n72 try {\n73 _data.writeInterfaceToken(DESCRIPTOR);\n74 mRemote.transact(Stub.TRANSACTION_getTimeNow, _data, _reply, 0);\n75 _reply.readException();\n76 _result = _reply.readString();\n77 }\n78 finally {\n79 _reply.recycle();\n80 _data.recycle();\n81 }\n82 return _result;\n83 }\n84 }\n85 static final int TRANSACTION_getTimeNow = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);\n86 }\n87 public java.lang.String getTimeNow() throws android.os.RemoteException;\n88 }</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>然后建立服务TimerService，建立内置类TimerServiceImpl实现接口ITimerService中的方法，由于使用 Remote Service 只能使用 bindService()方式对服务进行远程绑定，所以TimerService中须利用 onBind() 方法绑定 TimerServiceImpl 对象。</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n 1 public class TimerService extends Service {\n 2 \n 3     @Override\n 4     public IBinder onBind(Intent intent) {\n 5         // TODO 自动生成的方法存根\n 6         return new TimerServiceImpl();\n 7     }\n 8 \n 9     public class TimerServiceImpl extends ITimerService.Stub{\n10 \n11         @Override\n12         public String getTimeNow() throws RemoteException {\n13             // 获取当时时间与服务器端的进程Id\n14             Date date=new Date();\n15             SimpleDateFormat formatter = new SimpleDateFormat(&quot;E yyyy.MM.dd &#39;at&#39; hh:mm:ss a zzz&quot;);\n16             return  &quot;Time now is &quot;+ formatter.format(date)+&quot;\\nService processId is &quot;+Process.myPid();\n17         }\n18     }\n19 }</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>在 AndroidManifest.xml 文件设置服务绑定，在 action 项的 android:name 中绑定当前服务的接口</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n1     &lt;application&gt;\n2         ........\n3         &lt;service android:name=&quot;.TimerService&quot; android:process=&quot;:remote&quot;&gt;\n4             &lt;intent-filter&gt;\n5                 &lt;action android:name=&quot;com.example.remoteservice.ITimerService&quot;/&gt;\n6             &lt;/intent-filter&gt;\n7         &lt;/service&gt;\n8     &lt;/application&gt;</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>服务器端完成配置后建立一个客户端项目，把ITimerService.aidl文件copy到客户端，此时客户端也会在gen文件夹中自动生成ITimerService.java文件。在Activity中调用Remote Service时请注意，android 4.0 及以下版本，可通过 Intent(string action) 构造函数生成后直接调用。android 5.0 及以上版本需通过intent.setPackage(string packageName)指定action的包名称。</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n 1 public class MainActivity extends Activity {\n 2     private MyServiceConnection serviceConnection;\n 3     private boolean connected;\n 4     \n 5     @Override\n 6     protected void onCreate(Bundle savedInstanceState) {\n 7         super.onCreate(savedInstanceState);\n 8         setContentView(R.layout.activity_main);\n 9         //建立ServiceConnection对象\n10         serviceConnection=new MyServiceConnection();\n11     }\n12     \n13     public void btnBind_onclick(View view){        \n14         Intent intent=new Intent();\n15         //绑定远程服务接口\n16         intent.setAction(&quot;com.example.remoteservice.ITimerService&quot;);\n17         intent.setPackage(&quot;com.example.remoteservice&quot;);\n18         this.connected=true;\n19         Log.i(Context.ACTIVITY_SERVICE, &quot;-------onClick bindService--------&quot;);\n20         bindService(intent,this.serviceConnection,Context.BIND_AUTO_CREATE);    \n21     }\n22     \n23     public void btnUnbind_onclick(View view){\n24         Log.i(Context.ACTIVITY_SERVICE, &quot;-------onClick unbindService---------&quot;);\n25         if(connected){\n26            unbindService(serviceConnection);\n27            connected=false;\n28         }\n29     }\n30 }\n31 \n32 public class MyServiceConnection implements ServiceConnection{\n33 \n34     @Override\n35     public void onServiceConnected(ComponentName name, IBinder service){\n36         // TODO 自动生成的方法存根\n37         Log.i(Context.ACTIVITY_SERVICE, &quot;Service Connected&quot;);\n38         //获取远程对象\n39         ITimerService timerService=ITimerService.Stub.asInterface(service);    \n40         String data=null;\n41         \n42         try {\n43             data=timerService.getTimeNow()+&quot;\\nClient processId is &quot;+Process.myPid();\n44         } catch (RemoteException e) {\n45             // TODO 自动生成的 catch 块\n46             e.printStackTrace();\n47         }\n48 \n49         Log.i(Context.ACTIVITY_SERVICE,data);\n50     }\n51 }   \n</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>从运行结果可清晰看到Service与Client运行于不同的进程当中</p>\n\n<p><img alt=\"\" src=\"http://images2015.cnblogs.com/blog/64989/201605/64989-20160507011144966-1546515786.jpg\" style=\"height:138px; width:757px\" /></p>\n\n<p>&nbsp;</p>\n\n<p><strong>5.6 Remote Service 复杂类型数据传输</strong></p>\n\n<p>当 Remote Service 需要使用自定义类型的数据进行传输时，数据对象需要经过序列化处理，而 Android 对象的序列化处理有两种方式，一是常用方式&nbsp;Serializable 接口，另一个是 Android 独有的Parcelable 接口。由于常用的 Serializable 接口，会使用大量的临时变量耗费内存而导致大量的GC垃圾回收，引起手机资源不足，因此 Android 研发出 Parcelable 接口实现对象的序列化。它可被看作为一个 Parcel 容器，通过 writeToParcel() 与 createFormParcel() 方法把对象读写到 Parcel 当中，Parcelable接口如下：</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n 1 public interface Parcelable \n 2 {\n 3     //内容描述接口\n 4     public int describeContents();\n 5     //对象序列化方式\n 6     public void writeToParcel(Parcel dest, int flags);\n 7     \n 8     //反序列化对象，使用泛型方式在Parcel中构造一个实现了Parcelable的类的实例处理。\n 9     //接口分别定义了单个实例和多个实例\n10     public interface Creator&lt;T&gt; \n11     {\n12         public T createFromParcel(Parcel source);\n13         public T[] newArray(int size);\n14     }\n15 }</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>首先建立服务端，新建Person.aidl文件</p>\n\n<pre>\n1 package com.example.remoteservice;\n2 \n3 parcelable Person;  </pre>\n\n<p>建立Person类，实现Parcelable接口</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n 1 public class Person implements Parcelable {\n 2    private String name;\n 3    private Integer age;\n 4    private String desc;\n 5    \n 6    public Person(){\n 7    \n 8    }\n 9    \n10    public Person(String name, Integer age, String desc) {\n11     // TODO 自动生成的构造函数存根\n12        this.name=name;\n13        this.age=age;\n14        this.desc=desc;\n15    }\n16 \n17    public String getName(){\n18        return this.name;\n19    }\n20    \n21    public void setName(String name){\n22        this.name=name;\n23    }\n24    \n25    public Integer getAge(){\n26        return this.age;\n27    }\n28    \n29    public void setAge(Integer age){\n30        this.age=age;\n31    }\n32    \n33    public String getDesc(){\n34        return this.desc;\n35    }\n36    \n37    public void setDesc(String desc){\n38        this.desc=desc;\n39    }\n40 \n41     @Override\n42     public int describeContents() {\n43         // TODO 自动生成的方法存根\n44         return 0;\n45     }\n46 \n47     @Override\n48     public void writeToParcel(Parcel dest, int flags) {\n49         // TODO 自动生成的方法存根\n50         dest.writeString(name);  \n51         dest.writeInt(age);  \n52         dest.writeString(desc);  \n53     }\n54     \n55     public static final Parcelable.Creator&lt;Person&gt; CREATOR = new Creator&lt;Person&gt;() {  \n56         \n57         /** \n58          * 创建一个要序列号的实体类的数组，数组中存储的都设置为null \n59          */  \n60         @Override  \n61         public Person[] newArray(int size) {  \n62             return new Person[size];  \n63         }  \n64           \n65         /*** \n66          * 根据序列号的Parcel对象，反序列号为原本的实体对象 \n67          * 读出顺序要和writeToParcel的写入顺序相同 \n68          */  \n69         @Override  \n70         public Person createFromParcel(Parcel source) {  \n71             String name = source.readString();  \n72             int age = source.readInt();  \n73             String desc = source.readString();  \n74             Person Person = new Person();  \n75             Person.setName(name);  \n76             Person.setAge(age);  \n77             Person.setDesc(desc);  \n78               \n79             return Person;  \n80         }  \n81     };\n82 }</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>建立服务IPersonService.aidl文件</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n1 package com.example.remoteservice;\n2 \n3 import com.example.remoteservice.Person;\n4 \n5 interface IPersonService{\n6     Person getPerson(String number);\n7 }</pre>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<p>此时在gen\\com\\example\\remoteservice文件夹内将自动生成成IPersonService.java类</p>\n\n<p><a href=\"javascript:void(0);\" onclick=\"copyCnblogsCode(this)\" title=\"复制代码\"><img alt=\"复制代码\" src=\"http://common.cnblogs.com/images/copycode.gif\" /></a></p>\n\n<pre>\n  1 /*\n  2  * This file is auto-generated.  DO NOT MODIFY.\n  3  * Original file: D:\\\\Java_Projects\\\\RemoteService\\\\src\\\\com\\\\example\\\\remoteservice\\\\IPersonService.aidl\n  4  */\n  5 package com.example.remoteservice;\n  6 public interface IPersonService extends android.os.IInterface\n  7 {\n  8 /** Local-side IPC implementation stub class. */\n  9 public static abstract class Stub extends android.os.Binder implements com.example.remoteservice.IPersonService\n 10 {\n 11 private static final java.lang.String DESCRIPTOR = &quot;com.example.remoteservice.IPersonService&quot;;\n 12 /** Construct the stub at attach it to the interface. */\n 13 public Stub()\n 14 {\n 15 this.attachInterface(this, DESCRIPTOR);\n 16 }\n 17 /**\n 18  * Cast an IBinder object into an com.example.remoteservice.IPersonService interface,\n 19  * generating a proxy if needed.\n 20  */\n 21 public static com.example.remoteservice.IPersonService asInterface(android.os.IBinder obj)\n 22 {\n 23 if ((obj==null)) {\n 24 return null;\n 25 }\n 26 android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\n 27 if (((iin!=null)&amp;&amp;(iin instanceof com.example.remoteservice.IPersonService))) {\n 28 return ((com.example.remoteservice.IPersonService)iin);\n 29 }\n 30 return new com.example.remoteservice.IPersonService.Stub.Proxy(obj);\n 31 }\n 32 @Override public android.os.IBinder asBinder()\n 33 {\n 34 return this;\n 35 }\n 36 @Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException\n 37 {\n 38 switch (code)\n 39 {\n 40 case INTERFACE_TRANSACTION:\n 41 {\n 42 reply.writeString(DESCRIPTOR);\n 43 return true;\n 44 }\n 45 case TRANSACTION_getPerson:\n 46 {\n 47 data.enforceInterface(DESCRIPTOR);\n 48 java.lang.String _arg0;\n 49 _arg0 = data.readString();\n 50 com.example.remoteservice.Person _result = this.getPerson(_arg0);\n 51 reply.writeNoException();\n 52 if ((_result!=null)) {\n 53 reply.writeInt(1);\n 54 _result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);\n 55 }\n 56 else {\n 57 reply.writeInt(0);\n 58 }\n 59 return true;\n 60 }\n 61 }\n 62 return super.onTransact(code, data, reply, flags);\n 63 }\n 64 private static class Proxy implements com.example.remoteservice.IPersonService\n 65 {\n 66 private android.os.IBinder mRemote;\n 67 Proxy(android.os.IBinder remote)\n 68 {\n 69 mRemote = remote;\n 70 }\n 71 @Override public android.os.IBinder asBinder()\n 72 {\n 73 ret', '58', '2', '8', '4', '1', '1', '0000-00-00 00:00:00', '1', '2016-05-10 15:22:38');
INSERT INTO `bbs_post` VALUES ('18', '16', '35', '0', '我是十号', '<p>哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈</p>\n', '223', '6', '1', '0', '0', '1', '0000-00-00 00:00:00', '1', '2016-05-12 10:21:07');
INSERT INTO `bbs_post` VALUES ('19', '16', '1', '0', 'uuuuuuuuuuuuuu', '<p>uuuuuuuuuuuuuuuuuuuuuuu</p>\n', '2', '0', '0', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-13 22:26:42');
INSERT INTO `bbs_post` VALUES ('20', '16', '1', '0', '的点点滴滴的点点滴滴', '<p>点点滴滴点点滴滴点点滴滴点点滴滴</p>\n', '0', '0', '0', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-13 22:32:43');
INSERT INTO `bbs_post` VALUES ('21', '1', '1', '0', '坎坎坷坷坎坎坷坷', '<p>快快快快快快快快快快快</p>\n', '0', '0', '0', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-13 22:50:10');
INSERT INTO `bbs_post` VALUES ('22', '1', '1', '0', '坎坎坷坷坎坎坷坷', '<p>快快快快快快快快快快快</p>\n', '0', '0', '0', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-13 22:50:13');
INSERT INTO `bbs_post` VALUES ('24', '16', '1', '0', '隐隐约约隐隐约约隐隐约约呀', '<p>隐隐约约隐隐约约隐隐约约隐隐约约</p>\n', '46', '1', '0', '0', '0', '0', '2016-05-14 22:58:41', '1', '2016-05-13 22:53:21');
INSERT INTO `bbs_post` VALUES ('25', '16', '1', '0', '哦哦哦哦哦哦哦哦哦哦哦哦', '<p>哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦哦</p>\n', '31', '3', '0', '0', '1', '1', '0000-00-00 00:00:00', '0', '2016-05-13 22:53:41');
INSERT INTO `bbs_post` VALUES ('27', '16', '12', '0', '的的点点滴滴的点点滴滴', '<p>单独的</p>\n', '7', '0', '0', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-14 22:18:23');
INSERT INTO `bbs_post` VALUES ('31', '22', '1', '0', '关于本论坛上传功能的使用', '<p><img alt=\"\" src=\"/bbs2.0/php/source/post/20160514/20160514234026818.gif\" style=\"height:558px; width:800px\" /></p>\n\n<p>&nbsp;</p>\n\n<p>就这么简单</p>\n', '45', '2', '1', '0', '1', '1', '2016-05-14 23:41:23', '1', '2016-05-14 23:41:00');
INSERT INTO `bbs_post` VALUES ('32', '22', '1', '0', 'fdsf', '<p>fdsafdsfdsa<img alt=\"\" src=\"/bbs2.0/php/source/post/20160516/20160516202104589.png\" /></p>\n', '1', '0', '0', '0', '0', '0', '0000-00-00 00:00:00', '1', '2016-05-16 20:21:13');

-- ----------------------------
-- Table structure for `bbs_post_collection`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_post_collection`;
CREATE TABLE `bbs_post_collection` (
  `collection_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned DEFAULT NULL,
  `post_id` int(10) unsigned DEFAULT NULL,
  `collection_time` datetime NOT NULL,
  PRIMARY KEY (`collection_id`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_post_collection
-- ----------------------------
INSERT INTO `bbs_post_collection` VALUES ('6', '1', '6', '2016-05-09 20:49:56');
INSERT INTO `bbs_post_collection` VALUES ('7', '1', '5', '2016-05-10 13:15:18');
INSERT INTO `bbs_post_collection` VALUES ('17', '34', '18', '2016-05-12 11:13:23');
INSERT INTO `bbs_post_collection` VALUES ('18', '1', '18', '2016-05-13 19:14:47');
INSERT INTO `bbs_post_collection` VALUES ('19', '1', '25', '2016-05-13 22:56:39');
INSERT INTO `bbs_post_collection` VALUES ('20', '1', '24', '2016-05-13 22:57:44');
INSERT INTO `bbs_post_collection` VALUES ('22', '36', '25', '2016-05-13 23:49:16');
INSERT INTO `bbs_post_collection` VALUES ('23', '36', '18', '2016-05-13 23:58:17');
INSERT INTO `bbs_post_collection` VALUES ('24', '1', '31', '2016-05-15 17:51:24');
INSERT INTO `bbs_post_collection` VALUES ('25', '1', '17', '2016-05-15 18:54:40');

-- ----------------------------
-- Table structure for `bbs_premission`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_premission`;
CREATE TABLE `bbs_premission` (
  `premission_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `premission_name` varchar(16) NOT NULL,
  `premission_desc` varchar(64) NOT NULL,
  PRIMARY KEY (`premission_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_premission
-- ----------------------------
INSERT INTO `bbs_premission` VALUES ('1', '管理管理员', '允许管理管理员信息');
INSERT INTO `bbs_premission` VALUES ('2', '管理用户', '允许管理用户信息');
INSERT INTO `bbs_premission` VALUES ('3', '管理板块', '允许管理板块信息');
INSERT INTO `bbs_premission` VALUES ('4', '管理帖子', '允许管理帖子信息');
INSERT INTO `bbs_premission` VALUES ('5', '管理积分', '允许管理积分信息');
INSERT INTO `bbs_premission` VALUES ('6', '管理系统', '允许管理系统信息');

-- ----------------------------
-- Table structure for `bbs_repost`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_repost`;
CREATE TABLE `bbs_repost` (
  `repost_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` int(10) unsigned DEFAULT NULL,
  `user_id` int(10) unsigned DEFAULT NULL,
  `repost_content` text NOT NULL,
  `repost_support` int(10) unsigned NOT NULL DEFAULT '0',
  `repost_against` int(10) unsigned NOT NULL DEFAULT '0',
  `repost_time` datetime NOT NULL,
  PRIMARY KEY (`repost_id`)
) ENGINE=InnoDB AUTO_INCREMENT=46 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_repost
-- ----------------------------
INSERT INTO `bbs_repost` VALUES ('2', '6', '1', '哈哈哈哈哈', '0', '0', '2016-05-09 21:10:02');
INSERT INTO `bbs_repost` VALUES ('3', '6', '1', '哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈', '0', '0', '2016-05-09 21:10:17');
INSERT INTO `bbs_repost` VALUES ('5', '6', '1', '前后端分离', '0', '0', '2016-05-09 21:14:39');
INSERT INTO `bbs_repost` VALUES ('6', '6', '1', '范德萨分的撒', '0', '0', '2016-05-09 21:46:10');
INSERT INTO `bbs_repost` VALUES ('7', '6', '1', '范德萨分的撒fds', '0', '0', '2016-05-09 21:46:13');
INSERT INTO `bbs_repost` VALUES ('8', '6', '1', '范德萨范德萨分地方', '0', '0', '2016-05-09 21:46:16');
INSERT INTO `bbs_repost` VALUES ('9', '6', '1', '股份的施工方', '0', '0', '2016-05-09 21:46:18');
INSERT INTO `bbs_repost` VALUES ('10', '6', '1', '和规范的后果', '0', '0', '2016-05-09 21:46:20');
INSERT INTO `bbs_repost` VALUES ('11', '6', '1', '和规范的后果', '0', '0', '2016-05-09 21:46:22');
INSERT INTO `bbs_repost` VALUES ('12', '6', '1', '很尴尬的发挥', '1', '0', '2016-05-09 21:46:24');
INSERT INTO `bbs_repost` VALUES ('13', '6', '1', '就换个房间', '3', '2', '2016-05-09 21:46:26');
INSERT INTO `bbs_repost` VALUES ('14', '6', '1', '空间看见很高', '8', '0', '2016-05-09 21:46:30');
INSERT INTO `bbs_repost` VALUES ('15', '6', '1', 'VC下吃', '37', '10', '2016-05-09 21:47:29');
INSERT INTO `bbs_repost` VALUES ('16', '5', '1', '范德萨', '0', '0', '2016-05-09 21:47:43');
INSERT INTO `bbs_repost` VALUES ('17', '5', '1', '范德萨', '0', '0', '2016-05-09 21:47:48');
INSERT INTO `bbs_repost` VALUES ('18', '5', '1', '发答复', '0', '0', '2016-05-09 21:47:55');
INSERT INTO `bbs_repost` VALUES ('29', '9', '1', '牛鼻', '0', '0', '2016-05-10 14:34:22');
INSERT INTO `bbs_repost` VALUES ('30', '11', '1', '太牛掰了', '0', '0', '2016-05-10 15:15:24');
INSERT INTO `bbs_repost` VALUES ('31', '17', '32', '666666666666666', '1', '0', '2016-05-10 17:37:40');
INSERT INTO `bbs_repost` VALUES ('33', '18', '34', 'ggggggggggggggggg', '0', '0', '2016-05-12 10:40:10');
INSERT INTO `bbs_repost` VALUES ('34', '18', '34', '6666666666666666', '1', '0', '2016-05-12 10:40:25');
INSERT INTO `bbs_repost` VALUES ('35', '18', '12', '淡淡的点点滴滴点点滴滴点点滴滴', '0', '0', '2016-05-12 13:07:24');
INSERT INTO `bbs_repost` VALUES ('36', '18', '1', '快快快快快快快快快快快快', '0', '0', '2016-05-12 13:09:16');
INSERT INTO `bbs_repost` VALUES ('37', '17', '1', '范德萨分的', '0', '0', '2016-05-12 14:30:48');
INSERT INTO `bbs_repost` VALUES ('38', '18', '10', '刚刚滚滚滚滚滚滚滚滚滚', '0', '0', '2016-05-12 20:15:02');
INSERT INTO `bbs_repost` VALUES ('39', '18', '36', '点点滴滴点点滴滴点点滴滴的', '0', '0', '2016-05-12 21:05:46');
INSERT INTO `bbs_repost` VALUES ('40', '25', '1', '点点滴滴点点滴滴点点滴滴', '0', '0', '2016-05-13 22:54:38');
INSERT INTO `bbs_repost` VALUES ('41', '25', '1', '快快快快快快快快快快快', '0', '0', '2016-05-13 22:55:19');
INSERT INTO `bbs_repost` VALUES ('42', '25', '1', '哈哈哈哈哈哈哈哈哈哈哈', '0', '0', '2016-05-13 23:29:56');
INSERT INTO `bbs_repost` VALUES ('43', '24', '12', '单独的', '0', '0', '2016-05-14 22:16:49');
INSERT INTO `bbs_repost` VALUES ('44', '31', '1', '666666666666666', '0', '0', '2016-05-14 23:41:34');
INSERT INTO `bbs_repost` VALUES ('45', '31', '1', '哈哈哈', '0', '0', '2016-05-15 17:33:49');

-- ----------------------------
-- Table structure for `bbs_rerepost`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_rerepost`;
CREATE TABLE `bbs_rerepost` (
  `rerepost_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `repost_id` int(10) unsigned DEFAULT NULL,
  `user_id` int(10) unsigned DEFAULT NULL,
  `rerepost_content` varchar(256) NOT NULL,
  `rerepost_time` datetime NOT NULL,
  PRIMARY KEY (`rerepost_id`)
) ENGINE=InnoDB AUTO_INCREMENT=60 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_rerepost
-- ----------------------------
INSERT INTO `bbs_rerepost` VALUES ('1', '18', '1', '发发发发发发发发发方法', '2016-05-10 11:24:34');
INSERT INTO `bbs_rerepost` VALUES ('2', '15', '1', '发发发发发发发发发', '2016-05-10 11:24:58');
INSERT INTO `bbs_rerepost` VALUES ('3', '15', '1', '的的点点滴滴的点点滴滴', '2016-05-10 11:25:09');
INSERT INTO `bbs_rerepost` VALUES ('4', '15', '1', '是收拾收拾收拾收拾收拾', '2016-05-10 11:25:13');
INSERT INTO `bbs_rerepost` VALUES ('5', '15', '1', '想嘻嘻嘻嘻嘻嘻嘻嘻嘻嘻嘻嘻嘻嘻嘻', '2016-05-10 11:25:17');
INSERT INTO `bbs_rerepost` VALUES ('6', '15', '1', '都是范德萨范德萨分的撒发', '2016-05-10 11:25:21');
INSERT INTO `bbs_rerepost` VALUES ('7', '15', '1', '哈哈哈哈哈哈哈哈哈哈哈', '2016-05-10 11:26:07');
INSERT INTO `bbs_rerepost` VALUES ('8', '15', '1', 'dddddddddddd', '2016-05-10 12:00:16');
INSERT INTO `bbs_rerepost` VALUES ('9', '15', '1', '姐姐就斤斤计较斤斤计较斤斤计较斤斤计较斤斤计较斤斤计较斤斤计较斤斤计较斤斤计较斤斤计较斤斤计较斤斤计较斤斤计较', '2016-05-10 12:57:20');
INSERT INTO `bbs_rerepost` VALUES ('10', '18', '1', 'ddddddddddd', '2016-05-10 13:27:37');
INSERT INTO `bbs_rerepost` VALUES ('11', '18', '1', 'dssssssss', '2016-05-10 13:36:25');
INSERT INTO `bbs_rerepost` VALUES ('12', '18', '1', 'aaaaaaaaaaaaaa', '2016-05-10 13:36:51');
INSERT INTO `bbs_rerepost` VALUES ('13', '18', '1', 'eeeeeeeeeeee', '2016-05-10 13:42:16');
INSERT INTO `bbs_rerepost` VALUES ('14', '18', '1', 'rrrrrrrrrrrr', '2016-05-10 13:44:25');
INSERT INTO `bbs_rerepost` VALUES ('15', '18', '1', 'qqqqqqqqqqqqqqqqq', '2016-05-10 13:45:12');
INSERT INTO `bbs_rerepost` VALUES ('16', '18', '1', 'hhhhhhhhhhhhhhh', '2016-05-10 13:46:11');
INSERT INTO `bbs_rerepost` VALUES ('17', '18', '1', 'ssssssssssssssssssssssssssssss', '2016-05-10 13:51:23');
INSERT INTO `bbs_rerepost` VALUES ('18', '17', '1', 'sssssssssssssssss', '2016-05-10 13:51:38');
INSERT INTO `bbs_rerepost` VALUES ('19', '17', '1', 'hhhhhhhhhhh', '2016-05-10 13:53:50');
INSERT INTO `bbs_rerepost` VALUES ('20', '17', '1', 'hhhhhhhhhhhhhhhh', '2016-05-10 13:53:53');
INSERT INTO `bbs_rerepost` VALUES ('23', '12', '1', 'sssssssssssssssssss', '2016-05-10 13:58:00');
INSERT INTO `bbs_rerepost` VALUES ('24', '13', '1', 'ddddddddddddddd', '2016-05-10 13:58:36');
INSERT INTO `bbs_rerepost` VALUES ('25', '10', '1', 'ffffffffffffff', '2016-05-10 13:58:56');
INSERT INTO `bbs_rerepost` VALUES ('26', '10', '1', 'sssssssssssssss', '2016-05-10 14:00:01');
INSERT INTO `bbs_rerepost` VALUES ('30', '16', '1', 'dddddddddddd', '2016-05-10 14:13:20');
INSERT INTO `bbs_rerepost` VALUES ('31', '16', '1', 'ssssssssssssssssssss', '2016-05-10 14:14:23');
INSERT INTO `bbs_rerepost` VALUES ('32', '16', '1', 'ggggggggggggggg', '2016-05-10 14:15:06');
INSERT INTO `bbs_rerepost` VALUES ('37', '29', '1', '一般', '2016-05-10 14:34:28');
INSERT INTO `bbs_rerepost` VALUES ('38', '29', '1', '快快快快快快快快快', '2016-05-10 14:39:26');
INSERT INTO `bbs_rerepost` VALUES ('39', '30', '1', '一般一般', '2016-05-10 15:15:31');
INSERT INTO `bbs_rerepost` VALUES ('40', '31', '32', '99999999999999', '2016-05-10 17:37:44');
INSERT INTO `bbs_rerepost` VALUES ('43', '33', '34', '6666666666666666666', '2016-05-12 10:40:16');
INSERT INTO `bbs_rerepost` VALUES ('44', '33', '34', 'hhhhhhhhhhhhhhhhhh', '2016-05-12 10:49:24');
INSERT INTO `bbs_rerepost` VALUES ('45', '33', '34', 'gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg', '2016-05-12 11:00:54');
INSERT INTO `bbs_rerepost` VALUES ('46', '34', '1', '6666666666666', '2016-05-12 11:14:36');
INSERT INTO `bbs_rerepost` VALUES ('47', '34', '1', '777777777777777777', '2016-05-12 11:14:43');
INSERT INTO `bbs_rerepost` VALUES ('48', '37', '1', '范德萨分', '2016-05-12 14:30:53');
INSERT INTO `bbs_rerepost` VALUES ('49', '37', '1', '范德萨分', '2016-05-12 14:30:55');
INSERT INTO `bbs_rerepost` VALUES ('50', '36', '36', '点点滴滴点点滴滴', '2016-05-12 21:05:32');
INSERT INTO `bbs_rerepost` VALUES ('51', '36', '1', 'llllllllllllllllllllllllllllll', '2016-05-13 10:46:17');
INSERT INTO `bbs_rerepost` VALUES ('52', '39', '1', 'uuuuuu', '2016-05-13 19:44:21');
INSERT INTO `bbs_rerepost` VALUES ('53', '41', '1', '刚刚滚滚滚滚滚滚滚滚滚', '2016-05-13 22:55:49');
INSERT INTO `bbs_rerepost` VALUES ('54', '41', '1', '滚滚滚滚滚滚滚滚滚', '2016-05-13 22:56:02');
INSERT INTO `bbs_rerepost` VALUES ('55', '42', '1', 'iiiiiiiiiii', '2016-05-14 00:02:17');
INSERT INTO `bbs_rerepost` VALUES ('56', '42', '1', '快快快快快快快快快', '2016-05-14 00:02:38');
INSERT INTO `bbs_rerepost` VALUES ('57', '43', '12', '滚滚滚', '2016-05-14 22:16:56');
INSERT INTO `bbs_rerepost` VALUES ('58', '43', '12', '滚滚滚', '2016-05-14 22:17:15');
INSERT INTO `bbs_rerepost` VALUES ('59', '44', '1', '一般一般', '2016-05-14 23:41:41');

-- ----------------------------
-- Table structure for `bbs_role`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_role`;
CREATE TABLE `bbs_role` (
  `role_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `role_name` varchar(16) NOT NULL,
  `role_desc` varchar(64) NOT NULL,
  `role_time` datetime NOT NULL,
  PRIMARY KEY (`role_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_role
-- ----------------------------
INSERT INTO `bbs_role` VALUES ('1', '普通会员', '平民', '2016-05-10 17:59:53');
INSERT INTO `bbs_role` VALUES ('2', '版主', '管理板块帖子', '2016-05-10 18:00:27');
INSERT INTO `bbs_role` VALUES ('5', '范德萨分', '范德萨分', '2016-05-10 20:52:04');

-- ----------------------------
-- Table structure for `bbs_system_config`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_system_config`;
CREATE TABLE `bbs_system_config` (
  `config_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `bbs_login` tinyint(1) unsigned NOT NULL DEFAULT '1',
  `bbs_register` tinyint(1) unsigned NOT NULL DEFAULT '1',
  `bbs_login_fail_count` tinyint(1) unsigned NOT NULL DEFAULT '3',
  PRIMARY KEY (`config_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_system_config
-- ----------------------------
INSERT INTO `bbs_system_config` VALUES ('1', '1', '1', '3');

-- ----------------------------
-- Table structure for `bbs_system_modify_log`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_system_modify_log`;
CREATE TABLE `bbs_system_modify_log` (
  `log_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `manage_id` int(10) unsigned DEFAULT NULL COMMENT '管理员id',
  `config_id` int(10) unsigned DEFAULT NULL,
  `modify_content` text NOT NULL,
  `modify_time` datetime NOT NULL,
  PRIMARY KEY (`log_id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_system_modify_log
-- ----------------------------
INSERT INTO `bbs_system_modify_log` VALUES ('2', '1', '1', '登录状态:1->0 ', '2016-05-14 19:09:31');
INSERT INTO `bbs_system_modify_log` VALUES ('3', '1', '1', '注册状态:0->1 ', '2016-05-14 19:09:36');
INSERT INTO `bbs_system_modify_log` VALUES ('4', '1', '1', '登录状态:0->1 注册状态:1->0 失败登录次数:4->3', '2016-05-14 19:09:44');
INSERT INTO `bbs_system_modify_log` VALUES ('5', '1', '1', '注册状态:0->1 ', '2016-05-14 20:33:19');

-- ----------------------------
-- Table structure for `bbs_user`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_user`;
CREATE TABLE `bbs_user` (
  `user_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_name` varchar(32) NOT NULL,
  `user_active` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `user_pass` char(40) NOT NULL,
  `user_sex` tinyint(1) unsigned NOT NULL,
  `user_face` varchar(64) NOT NULL,
  `user_sign_active` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `user_signatrue` varchar(256) DEFAULT NULL,
  `user_reg_time` datetime NOT NULL,
  `user_integral` int(10) unsigned NOT NULL DEFAULT '0',
  `user_last_login_time` datetime DEFAULT NULL,
  `user_last_login_place` varchar(64) DEFAULT NULL,
  `user_last_login_ip` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_user
-- ----------------------------
INSERT INTO `bbs_user` VALUES ('1', 'dothin', '0', '58cef97ba7f8a30f0b6b9595be5b773aff7fb9c1', '0', '/bbs2.0/php/source/userId1/20160515173137787.gif', '1', '6666666666666', '2016-05-07 09:20:43', '0', '2016-05-16 20:39:45', null, '::1');
INSERT INTO `bbs_user` VALUES ('7', 'fdsa', '0', 'a14fbfb7b88dacd1af65d31bade857bc8e839e46', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 09:38:18', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('9', '石日天', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/userId9/20160512101501750.jpg', '0', '', '2016-05-07 11:15:51', '0', '2016-05-15 00:06:16', null, '::1');
INSERT INTO `bbs_user` VALUES ('10', '叶凡', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 11:20:06', '0', '2016-05-14 09:37:44', null, '::1');
INSERT INTO `bbs_user` VALUES ('11', '娜美', '0', '3d4f2bf07dc1be38b20cd6e46949a1071f9d0e3d', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 11:20:58', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('12', '路飞', '0', '58cef97ba7f8a30f0b6b9595be5b773aff7fb9c1', '0', '/bbs2.0/php/source/userId12/20160515173248828.jpg', '0', '', '2016-05-07 11:24:13', '0', '2016-05-15 17:32:39', null, '::1');
INSERT INTO `bbs_user` VALUES ('14', '发达舒服', '0', '3b8c084442fc1497e6a74284eb491e88ad348e86', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 11:33:22', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('16', '欢欢', '0', '05fe7461c607c33229772d402505601016a7d0ea', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 11:43:29', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('17', '发达舒服的', '0', 'da39a3ee5e6b4b0d3255bfef95601890afd80709', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 11:44:52', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('18', '发达舒服的', '0', 'da39a3ee5e6b4b0d3255bfef95601890afd80709', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 11:44:52', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('19', '哈哈哈', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 11:55:27', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('20', '是是是', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 11:57:27', '0', '2016-05-08 11:30:57', null, null);
INSERT INTO `bbs_user` VALUES ('21', '也一样', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 12:03:03', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('22', '乔巴', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 12:05:39', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('23', '乔巴', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 12:05:39', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('24', '日日日', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 12:43:08', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('25', 'fdsafdsaf', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 12:54:43', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('26', 'fdsdafdsaf', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 12:57:27', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('27', 'ttt', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-07 13:03:32', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('28', 'tttttt', '1', 'da39a3ee5e6b4b0d3255bfef95601890afd80709', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-08 16:53:34', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('29', 'sasa', '0', 'da39a3ee5e6b4b0d3255bfef95601890afd80709', '1', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-08 17:15:05', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('30', 'ffff', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-10 17:34:04', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('31', 'gggggg', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-10 17:35:42', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('32', 'ggggggaa', '0', 'da39a3ee5e6b4b0d3255bfef95601890afd80709', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-10 17:36:57', '0', null, null, null);
INSERT INTO `bbs_user` VALUES ('33', 'vvvv', '0', 'da39a3ee5e6b4b0d3255bfef95601890afd80709', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-10 17:49:31', '0', '2016-05-10 17:49:31', null, '::1');
INSERT INTO `bbs_user` VALUES ('34', '妮可罗宾', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/userId34/20160512102537154.jpg', '0', '', '2016-05-10 17:52:32', '0', '2016-05-14 09:36:39', null, '::1');
INSERT INTO `bbs_user` VALUES ('35', '十号', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '1', '哈哈哈哈哈哈哈哈哈哈哈哈', '2016-05-12 10:20:42', '0', '2016-05-14 09:46:17', null, '::1');
INSERT INTO `bbs_user` VALUES ('36', '云曦', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-12 14:15:33', '0', '2016-05-14 00:20:27', null, '::1');
INSERT INTO `bbs_user` VALUES ('37', '月婵', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-12 17:56:57', '0', '2016-05-15 12:49:21', null, '::1');
INSERT INTO `bbs_user` VALUES ('38', '火灵儿', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-14 00:21:13', '0', '2016-05-14 00:21:13', null, '::1');
INSERT INTO `bbs_user` VALUES ('39', '石中天', '1', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-14 00:25:51', '0', '2016-05-14 00:26:07', null, '::1');
INSERT INTO `bbs_user` VALUES ('40', 'gggg', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-14 16:52:03', '0', '2016-05-14 16:52:03', null, '::1');
INSERT INTO `bbs_user` VALUES ('41', 'ggggggggg', '0', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-14 17:34:03', '0', '2016-05-14 17:34:03', null, '::1');
INSERT INTO `bbs_user` VALUES ('42', 'tttt', '1', '7d60ede675bdd06968021408b630ce3f83bae86e', '0', '/bbs2.0/php/source/user/all_user.jpg', '0', null, '2016-05-14 18:27:18', '0', '2016-05-14 18:27:18', null, '::1');

-- ----------------------------
-- Table structure for `bbs_user_level`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_user_level`;
CREATE TABLE `bbs_user_level` (
  `user_level_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_level_name` varchar(16) NOT NULL,
  `user_level_desc` varchar(64) NOT NULL,
  `user_level_piece` varchar(32) NOT NULL,
  `user_level_time` datetime NOT NULL,
  PRIMARY KEY (`user_level_id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_user_level
-- ----------------------------
INSERT INTO `bbs_user_level` VALUES ('2', '青铜', '初级', '0,20', '2016-05-10 21:19:21');
INSERT INTO `bbs_user_level` VALUES ('3', '白银', '一般', '20,50', '2016-05-10 21:19:54');
INSERT INTO `bbs_user_level` VALUES ('4', '黄金', '还可以', '50,100', '2016-05-10 21:20:07');
INSERT INTO `bbs_user_level` VALUES ('5', '白金', '良好', '100,200', '2016-05-10 21:20:23');
INSERT INTO `bbs_user_level` VALUES ('6', '钻石', '很好', '200,500', '2016-05-10 21:25:19');
INSERT INTO `bbs_user_level` VALUES ('7', '大师', '大师级别', '500,1000', '2016-05-11 17:15:59');
INSERT INTO `bbs_user_level` VALUES ('8', '最强王者', '最强王者', '1000,100000000', '2016-05-11 17:16:26');

-- ----------------------------
-- Table structure for `bbs_user_module`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_user_module`;
CREATE TABLE `bbs_user_module` (
  `user_module_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned NOT NULL,
  `module_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`user_module_id`),
  KEY `module_id` (`module_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `module_id` FOREIGN KEY (`module_id`) REFERENCES `bbs_module` (`module_id`),
  CONSTRAINT `user_id` FOREIGN KEY (`user_id`) REFERENCES `bbs_user` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_user_module
-- ----------------------------
INSERT INTO `bbs_user_module` VALUES ('6', '1', '16');
INSERT INTO `bbs_user_module` VALUES ('7', '1', '15');
INSERT INTO `bbs_user_module` VALUES ('10', '1', '14');
INSERT INTO `bbs_user_module` VALUES ('11', '12', '16');
INSERT INTO `bbs_user_module` VALUES ('13', '10', '16');
INSERT INTO `bbs_user_module` VALUES ('16', '1', '7');
INSERT INTO `bbs_user_module` VALUES ('17', '34', '16');
INSERT INTO `bbs_user_module` VALUES ('18', '1', '22');

-- ----------------------------
-- Table structure for `bbs_user_role`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_user_role`;
CREATE TABLE `bbs_user_role` (
  `use_role_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `role_id` int(10) unsigned DEFAULT NULL,
  `user_id` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`use_role_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_user_role
-- ----------------------------

-- ----------------------------
-- Table structure for `bbs_whispers`
-- ----------------------------
DROP TABLE IF EXISTS `bbs_whispers`;
CREATE TABLE `bbs_whispers` (
  `whispers_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `from_user_id` int(10) unsigned DEFAULT NULL,
  `to_user_id` int(10) unsigned DEFAULT NULL,
  `whispers_content` varchar(256) NOT NULL,
  `whispers_status` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `whispers_time` datetime NOT NULL,
  PRIMARY KEY (`whispers_id`)
) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of bbs_whispers
-- ----------------------------
INSERT INTO `bbs_whispers` VALUES ('1', '36', '1', '哈哈哈哈哈哈哈哈哈哈哈哈哈哈', '1', '2016-05-12 20:07:13');
INSERT INTO `bbs_whispers` VALUES ('2', '36', '1', '点点滴滴点点滴滴点点滴滴的', '1', '2016-05-12 20:07:26');
INSERT INTO `bbs_whispers` VALUES ('3', '12', '1', '我是路飞', '1', '2016-05-12 20:13:49');
INSERT INTO `bbs_whispers` VALUES ('4', '10', '1', '我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡我是叶凡', '1', '2016-05-12 20:15:44');
INSERT INTO `bbs_whispers` VALUES ('5', '1', '10', '我是dothin我是dothin我是dothin我是dothin我是dothin我是dothin我是dothin我是dothin我是dothin', '1', '2016-05-12 20:16:02');
INSERT INTO `bbs_whispers` VALUES ('6', '10', '1', '的点点滴滴的点点滴滴', '1', '2016-05-12 20:35:46');
INSERT INTO `bbs_whispers` VALUES ('7', '10', '1', '刚刚滚滚滚滚滚滚滚滚滚', '1', '2016-05-12 20:35:49');
INSERT INTO `bbs_whispers` VALUES ('8', '10', '1', '哈哈哈哈哈哈哈哈哈哈哈哈哈', '1', '2016-05-12 20:35:53');
INSERT INTO `bbs_whispers` VALUES ('9', '10', '1', '休息休息休息休息休息', '1', '2016-05-12 20:35:56');
INSERT INTO `bbs_whispers` VALUES ('10', '10', '1', 'vvvvvvvvvvvvvvvvvvvvv', '1', '2016-05-12 20:36:01');
INSERT INTO `bbs_whispers` VALUES ('11', '36', '1', '点点滴滴点点滴滴的', '1', '2016-05-12 21:04:36');
INSERT INTO `bbs_whispers` VALUES ('12', '36', '1', '个滚滚滚滚滚滚滚滚滚', '1', '2016-05-12 21:04:40');
INSERT INTO `bbs_whispers` VALUES ('13', '1', '36', '刚刚滚滚滚滚滚滚滚滚滚', '1', '2016-05-12 21:06:00');
INSERT INTO `bbs_whispers` VALUES ('14', '1', '10', '滚滚滚滚滚滚滚滚滚滚滚滚滚滚滚', '1', '2016-05-12 21:30:34');
INSERT INTO `bbs_whispers` VALUES ('20', '1', '1', '点点滴滴点点滴滴的', '1', '2016-05-12 21:46:17');
INSERT INTO `bbs_whispers` VALUES ('23', '1', '10', '的点点滴滴的点点滴滴', '1', '2016-05-12 21:48:05');
INSERT INTO `bbs_whispers` VALUES ('30', '36', '1', '点点滴滴点点滴滴', '1', '2016-05-12 23:38:11');
INSERT INTO `bbs_whispers` VALUES ('33', '1', '36', 'hhhhhhhhhhhhh', '1', '2016-05-13 19:26:47');
INSERT INTO `bbs_whispers` VALUES ('34', '1', '36', 'yyyyy', '1', '2016-05-13 19:44:16');
INSERT INTO `bbs_whispers` VALUES ('35', '1', '12', 'dddddddddddd', '1', '2016-05-13 19:53:11');
INSERT INTO `bbs_whispers` VALUES ('37', '1', '35', 'dddddddddd', '0', '2016-05-14 23:45:44');
INSERT INTO `bbs_whispers` VALUES ('38', '12', '1', '滚滚滚', '1', '2016-05-15 11:10:55');
INSERT INTO `bbs_whispers` VALUES ('39', '12', '1', '飞飞飞', '1', '2016-05-15 12:06:15');
INSERT INTO `bbs_whispers` VALUES ('48', '1', '37', '飞飞飞', '1', '2016-05-15 13:07:49');
INSERT INTO `bbs_whispers` VALUES ('49', '1', '37', '滚滚滚', '1', '2016-05-15 13:09:17');
INSERT INTO `bbs_whispers` VALUES ('50', '1', '37', '刚刚', '1', '2016-05-15 13:10:15');
INSERT INTO `bbs_whispers` VALUES ('51', '1', '37', '的的', '1', '2016-05-15 13:10:28');
INSERT INTO `bbs_whispers` VALUES ('52', '37', '1', '刚刚', '1', '2016-05-15 13:12:38');
INSERT INTO `bbs_whispers` VALUES ('53', '1', '12', '范德萨范德萨分的说股份的干活的话赶紧换个发大水放', '0', '2016-05-15 18:55:55');
